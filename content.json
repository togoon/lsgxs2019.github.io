{"pages":[{"title":"404","text":"","link":"/404/index.html"},{"title":"about","text":"AboutAbout me","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"data","text":"","link":"/data/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"timeline","text":"","link":"/timeline/index.html"}],"posts":[{"title":"120周线的支撑","text":"在三线开花的周线系统中，可以再加上120周线，大多牛股的调整极限会在120周线处","link":"/2021/08/04/120%E5%91%A8%E7%BA%BF%E7%9A%84%E6%94%AF%E6%92%91/"},{"title":"TestHexoWrite","text":"Hexo文档头模板_Slling’s Hello World-CSDN博客 https://www.imooc.com/article/304251","link":"/2021/05/20/HexoFrontMatter/"},{"title":"把Hexo生成的静态网页部署到coding上","text":"把Hexo生成的静态网页部署到coding上因为github的网速问题，可以尝试把hexo生成的静态博客文件发布到coding上。 首先注册coding账号(CODING - 一站式软件研发管理平台)，并绑定腾讯云（需要实名认证） 新建5人以下团队的项目 新建代码仓库(选择devops)，可以选择添加readme文件 点击代码仓库中，在左下角显示项目设置，再选择功能开关，如果不熟悉，可以打开所有功能开关，持续集成和持续部署要选择。 在本地的git bash 命令窗口下，使用clip &lt; id_ed25519.pub ，把公钥的内容输出到剪贴板，在coding的个人账户设置里，添加公钥内容并保存。使用ssh -T git@coding.net 测试ssh协议链接。 编辑hexo博客项目根目录下的_config.yml文件，把deployer段的内容修改下面的内容： 12345deploy: type: git repo: git@e.coding.net:username/myblog/hexoblog.git branch: master hexo g -d 发布到coding腾讯云空间 部署成功后，设置自定义以域名 部署在coding的静态网站的收费标准 有6个月的免费试用期，后期应该是要收取费用的，具体可以查看coding 官方的资费明细 自动部署也可以实现自动部署博客到coding","link":"/2021/06/08/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0coding/"},{"title":"HowtoUseHexo","text":"install node.js 和git install hexo （ git bash） hexo init 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install Configuration _config.yml write post 1hexo new &lt;title&gt; generate 1hexo generat or hexo g server 1hexo server deploy 123本地浏览 localhost:4000部署到github.com :hexo deploy or hexo d 重新修改post之后 123456hexo clean （删除db.json数据库和由generate生成的保存html文件的public目录）hexo generate （重新把source目录下的md文档生成每个文件夹下的index.html文件，这些文件夹都是以年月日建立的目录树，所有要发布的内容保存在public目录下）hexo server localhost:4000 hexo deploy （一般要执行hexo deploy 或者hexo d,hexo deploye时， 是先清空.deploy_git目录，然后从public目录所有内容复制到到.deploy_git目录，按照_config.yml里设置的deploye参数push到远程仓库。如果自己手动在git bash 命令窗口下使用git 命令push到远程的仓库，需要推送的是public目录，而不是项目目录。如果没有完整的项目文件，可以直接使用git clone把远程仓库的所有内容clone到本地，修改之后在再直接push到远程，不过一不推荐这个方式，容易出错，只是通过这种方式熟悉hexo的工作流程。hexo必须把markdown文件在本地转换成html再上传到github，而github对jekyll的支持，可以直接push本地的markdown文件到github仓库，由github提供的服务把markdown转换为html。 这里的图片引用使用域名+站点目录的形式 12![img](https://customedns\\images\\xxx.jpg)想在markdown文档中引用图片，可以把图片保存在站点根目录的images目录下。需要在运行hexo generate命令之后，把图片复制到生成的public\\images目录下，然后由hexo deply把public目录复制到.deploy_git目录，git上传到到username.github.io站点根目录下 Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/05/18/HowtoUseHexo/"},{"title":"UEFIandGPT电脑主机安装windows10","text":"UEFI +GPT电脑主机安装Windows10 好久没有安装windows系统了，有点生疏。一台UEFI启动的机器，使用ventory多合一的winpe启动后，在winpe下格式化分区，使用dism++恢复自己封装的win10系统(wim格式的镜像)，重启后不能进入win10。后来使用别的方法恢复镜像，同样不能正常启动windows10系统。 后来仔细想了一下，会不是是硬盘的分区表格式不对。当时没在意原来的硬盘分区情况。第二天又上门去安装系统，特意看了一下硬盘的情况，是一个支持NVME协议的SSD硬盘，另外一个应该是sata协议的机械硬盘。在更改UEFI启动顺序，记得有个windows boot manager intel ssd 选项，这个就是那个固态硬盘。豁然开朗，问题就在这个上。 对于这种配置的双硬盘系统，一般把操作系统安装在这SSD固态硬盘上，可以提高系统的运行速度，机械硬盘可以用保存用户数据。 重新安装的方法如下： 在UEFI启动参数表里更改启动顺序。设置U盘为第一驱动顺序 使用U盘的winpe启动，在winpe下使用分区工具把单独的那个固态硬盘重新分区，记得使用gpt格式的，不能使用mbr格式，否则系统安装上，UEFI也无法识别硬盘。分区时，如果不太熟悉，可以直接使用快速分区，建立一个分区即可，另外记得把esp分区勾选中。 直接使用ventory的多合一winpe，可以直接显示安装版的windows10镜像，选择即可进入常规的windows安装界面，剩下的就很简单了。完成安装后重启系统，第一有点慢，一直在转圈圈，耐心等，正常就是如此。给别人装机就有点忐忑^_^。所以我轻易不给别人装机，谁叫他是自己的亲戚呢。一点点的问题，最后都是你装的问题，哈哈，这是人性，扯远了。正在疑惑时，熟悉的windows10界面终于出现了，我就说，没有我搞不定问题，其实，这个也可以收获满满的成就感，给自己鼓励一下。 最后记得把UEFI里的启动设备顺序还原为SSD第一顺序启动。 最后总结要点如下： 12341. 在UEFI界面里设置启动顺序为自带winpe的U盘2. 在windows管理工具下查看硬盘的情况（如果已经不能登陆windows系统，就在winpe的分区工具里可以看到几个硬盘）：是一块普通的硬盘，还是带有固态硬盘的双硬盘配置。如果有固态硬盘，就可以把操作系统单独安装在这个固态硬盘上。3. UEFI系统就一定要使用GPT的硬盘分区；如果是传统那个的bios，那就可以使用MBR硬盘分区。直接在这固态硬盘上新建分区，另外一个硬盘的数据不会丢失。保险起见，也可以先用一个大容量的移动硬盘把用户的数据复制出来，这样你可以很踏实。4. 如果没有靠谱的winpe分区工具，就只能在进入原版window界面后按下快捷键，进入cmd界面，使用命令行来完成分区，这个有点小门槛，不过熟悉了不过如此，实在记不住，就把它保存在你的笔记里，在需要的时候可以查询。 扩展知识：清除驱动器并将其转换为 GPT的两种方法（数据很宝贵，操作需谨慎。如果搞不懂，就不要使用下面的方法，否则数据会没有的） 详细可参照微软公司官方文档 使用 Windows 安装程序擦除和转换驱动器关闭电脑，然后放入 Windows 安装 DVD 或 USB 密钥。在 UEFI 模式下将电脑启动到 DVD 或 USB 密钥。 有关详细信息，请参阅 启动到 UEFI 模式或传统 BIOS 模式。选择安装类型时，请选择“自定义” 。在“你想将 Windows 安装在哪里？”屏幕上，选择驱动器上的每个分区，并选择“删除” 。 驱动器将显示单个未分配空间区域。选择未分配的空间，然后单击“下一步” 。 Windows 检测到电脑已启动到 UEFI 模式，并使用 GPT 驱动器格式重格式化驱动器，然后开始安装。 手动擦除驱动器并将其转换为 GPT：关闭电脑，然后放入 Windows 安装 DVD 或 USB 密钥。在UEFI 模式下将电脑启动到 DVD 或 USB 密钥。 有关详细信息，请参阅 启动到UEFI模式或传统 BIOS 模式。在 Windows 安装程序中，按“Shift+F10”打开命令提示符窗口 。打开 diskpart 工具： 1diskpart 1list disk 1234select disk &lt;disk number&gt;cleanconvert gptexit 关闭命令提示符窗口。继续 Windows 安装程序安装。选择安装类型时，请选择“自定义” 。 驱动器将显示为单个未分配空间区域。选择未分配的空间，然后单击“下一步” 。 Windows 开始安装。","link":"/2021/08/20/UEFIandGPT%E7%94%B5%E8%84%91%E4%B8%BB%E6%9C%BA%E5%AE%89%E8%A3%85windows10/"},{"title":"assets-folders","text":"Global Asset FolderAssets are non-post files in the source folder, such as images, CSS or JavaScript files. For instance, If you are only going to have a few images in the Hexo project, then the easiest way is to keep them in a source/images directory. Then, you can access them using something like ![](/images/image.jpg) post asset folderFor users who expect to regularly serve images and/or other assets, and for those who prefer to separate their assets on a post-per-post basis, Hexo also provides a more organized way to manage assets. This slightly more involved, but very convenient approach to asset management can be turned on by setting the post_asset_folder setting in _config.yml to true. 12_config.ymlpost_asset_folder: true With asset folder management enabled, Hexo will create a folder every time you make a new post with the hexo new [layout] &lt;title&gt; command. This asset folder will have the same name as the markdown file associated with the post. Place all assets related to your post into the associated folder, and you will be able to reference them using a relative path, making for an easier and more convenient workflow. Tag Plugins For Relative Path ReferencingReferencing images or other assets using normal markdown syntax and relative paths may lead to incorrect display on archive or index pages. Plugins have been created by the community to address this issue in Hexo 2. However, with the release of Hexo 3, several new tag plugins were added to core. These enable you to reference your assets more easily in posts: 123{% asset_path slug %}{% asset_img slug [title] %}{% asset_link slug [title] %} For example, with post asset folders enabled, if you place an image example.jpg into your asset folder, it will not appear on the index page if you reference it using a relative path with regular ![](example.jpg) markdown syntax (however, it will work as expected in the post itself). The correct way to reference the image will thus be using tag plugin syntax rather than markdown: 12{% asset_img example.jpg This is an example image %}{% asset_img &quot;spaced asset.jpg&quot; &quot;spaced title&quot; %} This way, the image will appear both inside the post and on index and archive pages. Embedding an image using markdownhexo-renderer-marked 3.1.0 introduced a new option that allows you to embed an image in markdown without using asset_img tag plugin. To enable: 12345_config.ymlpost_asset_folder: truemarked: prependRoot: true postAsset: true Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, ![](image.jpg) will be rendered as &lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt; from : [hexo-docments](Asset Folders | Hexo)","link":"/2021/06/17/assets-folders/"},{"title":"有趣的技术文档链接","text":"有趣的技术文档链接 如何通过bash快速导航目录 文章链接：How to navigate directories faster with bash (mhoffman.github.io) 介绍了很炫酷的命令，在Bash shell中方便快速的切换目录 Html boilerplate 文章链接：My current HTML boilerplate 作者介绍了自己目前使用的 HTML 页面模板，解释了每一行的用途 微软公司的Rust教程：Take your first steps with Rust - Learn | Microsoft Docs 最小的 Docker 镜像文件: Building a 6kB Containerized HTTP Server! 作者介绍如何做出一个最小的 Docker 镜像文件，包含一个简单的 HTTP 服务器，大小只有 6KB","link":"/2021/05/17/bash-change-directory/"},{"title":"Markdown语法简介","text":"本中文版Markdown语法简介来自博客 https://blog.shengbin.me/posts/markdown-syntax Markdown语法的完整介绍在这里：http://daringfireball.net/projects/markdown/syntax。下面整理的这些为了方便写博客时参考。 分段与分行以一个或多个空行来隔开段落；以两个或多个空格来段内换行。 标题123456789101112This is an H1=============This is an H2-------------# This is an H1## This is an H2###### This is an H6 引用在每一行前面写一个&gt;： 1234567&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt;&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. 效果： This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 或者在每一段前面写一个&gt;： 1234567&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 多重引用123456&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 效果： This is the first level of quoting. This is nested blockquote. Back to the first level. 列表列表项占一行，以*、+、-开头即可： 1234* Red* Green* Blue 效果： Red Green Blue 有序列表只需要将上述标记符换成数字加句点。而且顺序由书写顺序决定，与数字无关，但数字需要从1开始。例如： 12341\\. Bird3. McHale2. Parish 效果： Bird McHale Parish 每一个列表项可以多行： 123456* Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.* Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing. 效果： Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 代码块每一行前面缩进四个或以上个空格，就认为是开始了一段代码块。代码块内原样输出。 1234This is a normal paragraph: This is a code block. 效果： This is a normal paragraph: 12This is a code block. 横线三个或更多个*、-（它们之间可以有空格）会产生横线： 12* * * 效果： 链接内嵌链接： 1234I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;). 或参考文献式链接（缺省的链接标记认为与文本一致）： 1234567891011121314I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot;I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 效果： I get 10 times more traffic from Google than from Yahoo or MSN. 如果直接以链接地址作为链接文本，可以用如下快捷写法： 12&lt;http://www.shengbin.me&gt; 效果： http://www.shengbin.me 强调单个*或_产生斜体，两个（**、__）则产生粗体。例如： 1234*like* _this_**like** **this** 效果： like this like this 内嵌代码12code: `echo hello` 效果： code: echo hello 图片图片与链接类似，只需在文本前面加上感叹号!即可。图片位置和大小无法通过Markdown来指定。 转义字符以下特殊字符需要用\\转义得到。 123456789101112\\ backslash` backtick* asterisk_ underscore{} curly braces[] square brackets() parentheses# hash mark+ plus sign- minus sign (hyphen). dot! exclamation mark","link":"/2021/05/19/chinese-markdown-cheatsheet/"},{"title":"使用Jekyll在GitHub上写博客","text":"使用Jekyll 在GitHub上写博客 注册一个163.com的免费邮箱（其他邮箱可自己实验，也许github对邮箱没有要求)，用来接受github发送的验证信息。 在Github上注册一个账户。 使用注册的邮箱完成github账户的认证 在Github上新建一个仓库，仓库名称为username.github.io 注意留心一下仓库建立完毕后，github显示的关于操作github的git命令帮助文档。 下载并安装Windows版本的Git 了解git 打开git bash 命令窗口 在git bash 下设置与github通讯的用户名和邮箱： 在git bash 下新建一个ssh协议的密钥： ssh-keygen -et25519 xxxxx 登陆到github上，在setting 下把新产生的ssh密钥复制并保存。 可以使用git 命令测试一下与github的链接是否成功。 此时就可以按照github提供的git命令帮助文档实现和github仓库的通讯。 因github网络的问题，可以下载个专门的设置hosts文件的工具，有现成的很简单，在一定程度上解决网络访问问题。当然，有空的话了解一下为什么后更好。 熟悉了git 命令操作github仓库后，就可以开始学习github推荐的jekyll博客工具 jekyll的安装 参考官方文档的安装帮助:Jekyll on Windows | Jekyll • Simple, blog-aware, static sites (jekyllrb.com) 大致流程就是下载Windows版本的ruby安装包，安装ruby 安装jekyll 安装gem ，gem相当于是ruby的包管理器，而jekyll就是ruby的一个应用包。关于gem ：RubyGems is a package management framework for Ruby.这是官方的描述。 1234567891011121314151617181920212223Jekyll requires the following:Ruby version 2.4.0 or higherRubyGemsGCC and MakeSee Requirements for guides and details.---------------------------------------------------------------Instructions1、Install all prerequisites.2、Install the jekyll and bundler gems. `gem install jekyll bundler`3、Create a new Jekyll site at ./myblog. `jekyll new myblog`4、Change into your new directory. `cd myblog`5、Build the site and make it available on a local server. `bundle exec jekyll serve`6、Browse to http://localhost:4000` 使用Markdown文本编辑器Typora在本地仓库_posts目录下编辑你博客文档，记得在markdown文档的最前边填写Jekyll出路文档的元数据，格式如下： ```markdownlayout: posttitle: 使用Jekyll在GitHub上写博客date: 2021-05-13Author: xian shancategories:tags: [github, blog] comments: true 如果每次书写这些数据对不方便，可保存成一个单独的markdow文件，切换到markdown源代码视图下(Ctrl+/)，复制粘贴到文档的最顶部即可。","link":"/2021/05/19/first-jekyll-blog/"},{"title":"gitshub仓库分支重命名","text":"gitshub仓库分支重命名在github仓库的分支操作界面改名之后，会提示在本地仓库运行下面的命令 1234git branch -m hexo-source sourcegit fetch origingit branch -u origin/source sourcegit remote set-head origin -a","link":"/2021/05/27/gitshub%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E9%87%8D%E5%91%BD%E5%90%8D/"},{"title":"关于git与github通讯的Https协议和SSH协议","text":"git与github通讯的Https协议和SSH协议在安装Git后，需要使用git命令与github仓库通讯，一般由两种协议实现与git与github仓库的通讯 https如果刚刚接触git和github，使用https协议与github通讯比较容易上手，顺利实现各种git命令的操作。一般复制仓库的本地的git命令如下 12git clone https://github.com/username.gitbub.io.git git clone 命令是多个git命令的封装，相当在本地新建立的username.github.io目录，再执行git init 纳入.git管理,自动建立一个master分支（git checkout -b master），自动添加远程连接git remote add origin https://github.com/username.gitbub.io.git，再 git fetch下载数据 只是在每次都要输入用户名和邮箱，有点不方便，需要再使用git config –global user.name “git用户名” 和git config –global user.email “注册git时的邮箱” SSHSSH的全称时Secure Shell,通过一对加密的密钥来实现客户端和服务器的通讯。在 Git Bash 命令行窗口下，使用以下命令来生成SSH密钥 123456781.ssh-keygen -t rsa -C &quot;username.com--这里是密钥的注释，一般使用邮箱可说明它的用途&quot;这里的-t rsa 参数知名密钥类型为rsa，-C 为注释。也可以再加上-f filename来指定密钥的文件名称。在安装git之后，使用这个命令可在默认的路径下生成id_rsa.pub和id_rsa这两个公钥和私钥文件，一般要查询他的路劲，可在git bash 命令行下输入下面的命令：cd ~/.sshls -al 2.如果已经生成过密钥的话，就会显示这两个文件，在ssh-keygen命令中不带-f filename 参数的话，默认的文件名是id_rsa 和id_rsa.pub。3.在git bash命令窗口下使用clip &lt; id_rsa.pub，可以把文件的内容复制到剪贴板上，登录到github，在网站的setting下打开SSH及GPG Keys选项，titile随便自己一个，把剪贴板的内容粘贴在ssh-key里，保存即可，以后使用git 操作github仓库时就可以使用git@github.com:username/username.github.io.git的格式了，这个据说时传输数据的效率比https更高一些。4.如果后来又重新生成了一对密钥文件，并且把公钥的内容添加在github上之后，就要把这对密钥对应的私钥覆盖到~/.ssh目录下，这个是安装git时默认的路径，如果想修改git 使用的密钥文件的话，就要修改环境变量，不想麻烦的话，就把新生成的密钥文件改名覆盖原来的密钥对文件即可。","link":"/2021/05/30/git%E4%B8%8Egithub%E9%80%9A%E8%AE%AF%E7%9A%84Https%E5%8D%8F%E8%AE%AE%E5%92%8CSSH%E5%8D%8F%E8%AE%AE/"},{"title":"git操作git仓库命令入门","text":"新建一个目录 branch_demo cd branch_demo git init git status git checkout -b branch-name echo “git branch start” &gt;&gt; readme.md git add . git commit -m “git branch start” git remote add origin https://github.com/usermame.github.io.git or git remote add origin git@github.com:username.github.io.git git push -u origin —-新建分支第一次推送到远程时，需要-u参数指明上游，或者使用–set-upstream,以后再推送就不需要-u参数了","link":"/2021/05/28/git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"},{"title":"git对github仓库分支的操作","text":"分支的查询12git branch ----查询当前分支git branch -a ----查询所有分支 新建分支12git branch branch-name ----新建一个名称为branch-name的分支git checkout --orphan branch-name ----新建一个名称为branch-name的无父节点的分支，并自动切换到该分支 分支的删除123在删除分支时，先要确认一下要删除的分支不是当前分支，如果时当前分支的话是不能被删除的，可以使用git checkout branch-name来切换为非当前分支，然后再删除。git branch -d branch-name ----删除本地的分支git push origin --delete branch-name ----删除远程仓库分支 分支重命名1git branch -m old-name new-name 分支的切换1git checkout branch-name","link":"/2021/05/26/git%E5%AF%B9github%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E7%9A%84%E6%93%8D%E4%BD%9C/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/08/20/hello-world/"},{"title":"hexo actions","text":"actions-1 123456789101112131415161718192021222324252627282930313233343536373839404142name: Main workflowon: push: branches: - rawjobs: build: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 - name: Use Node.js lts uses: actions/setup-node@v2-beta with: node-version: '12.x' - name: prepare build env env: GH_ACTION_DEPLOY_KEY: ${{ secrets.GH_ACTION_DEPLOY_KEY }} NEXT_VERSION: v8.0.0-rc.2 run: | mkdir -p ~/.ssh/ echo &quot;$GH_ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.name 'gythialy' git config --global user.email 'gythialy@users.noreply.github.com' npm i -g hexo-cli npm i git clone --branch ${NEXT_VERSION} --depth=10 git@github.com:next-theme/hexo-theme-next.git themes/next git checkout -b ${NEXT_VERSION} git clone git@github.com:next-theme/theme-next-three --depth=1 themes/next/source/lib/three git clone git@github.com:next-theme/theme-next-fancybox3 --depth=1 themes/next/source/lib/fancybox git clone git@github.com:next-theme/theme-next-pace --depth=1 themes/next/source/lib/pace - name: deploy to github env: HEXO_ALGOLIA_INDEXING_KEY: ${{ secrets.HEXO_ALGOLIA_INDEXING_KEY }} run: | hexo generate &amp;&amp; hexo algolia &amp;&amp; hexo deploy atcion-2 12345678910111213141516171819202122232425262728293031323334name: CIon:push:branches:- hexojobs:build:runs-on: ubuntu-lateststeps:- name: Checkout sourceuses: actions/checkout@v1with:ref: hexo- name: Use Node.js ${{ matrix.node_version }}uses: actions/setup-node@v1with:version: ${{ matrix.node_version }}- name: Setup hexoenv:ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}run: |mkdir -p ~/.ssh/echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsachmod 600 ~/.ssh/id_rsassh-keyscan github.com &gt;&gt; ~/.ssh/known_hostsgit config --global user.email &quot;lujiahao0708@gmail.com&quot;git config --global user.name &quot;lujiahao0708&quot;npm install hexo-cli -gnpm install- name: Hexo deployrun: |hexo cleanhexo d","link":"/2021/05/28/hexo-actions/"},{"title":"hexo博客项目的备份和重建","text":"hexo博客项目的备份和重建之本地备份 如果需要重建hexo博客项目，只需要保存你的文档目录source、你的博客主题目录themes、scaffolds目录、配置文件_config.yml。 最好把远程仓库重新clone到本地的备份目录，可能里面会有你自定义的目录，比如images保存的各种展示图片(如果使用第三方图床就不必保存)。 开始重建hexo博客项目 hexo init npm install 把前面备份的source、themes目录和_config.yml复制到新建立的hexo项目目录下。 hexo g hexo server localhost:4000在本地查看 正常显示后发布到远程的github仓库: hexo d 如果发布时出现ERROR Deployer not found: git 的错误提示信息，就再把hexo 一键发布包安装一下：npm install hexo-deployer-git –save,然后再执行hexo d即可成功发布到github远程仓库，记得在仓库的根目录下新建CANME文件。","link":"/2021/05/24/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E9%87%8D%E5%BB%BA/"},{"title":"hexo博客项目的备份和重建之远程备份","text":"认识hexo项目的目录结构使用hexo init之后，hexo会在你指定的目录下创建项目所需的目录和文件,如下图所示 12345678910.github ----node_modules----项目依赖的包文件scaffolds ----模版文件soruce ----保存用户文档themes ----主题包目录.gitignore ---- 指定的不纳入git管理的内容_config.landscape.yml----_config.yml ----项目配置文件package.json----package-lock.json 在初始化hexo项目目录之后，基本的博客框架建立，就可以开始使用markdown编辑器书写文档，保存在source_posts目录下。 文档编辑完成后，就可以使用hexo generate 来生成静态的网页文件，所有生成的文件都保存在public目录下。这段英文来自hexo官方文档的描述: All generated files are saved in the public folder. You can copy them to wherever you like。 此时hexo博客项目的目录下又多了public目录和db.json。db.json是以json格式的文件来保存你的博客文档的元数据。 123456789101112.github ----node_modules----项目依赖的包文件public ----hexo generate 生成的所有静态网页文件及资源文件scaffolds ----模版文件soruce ----保存用户文档themes ----主题包目录.gitignore ---- 指定的不纳入git管理的内容_config.landscape.yml----_config.yml ----项目配置文件package.json----package-lock.jsondb.json 在本地使用发布静态网页和备份项目文件的命令第一步、发布文档 123hexo clean hexo ghexo d 第二步、备份项目文件到github仓库的指定分支 1234使用gi命令上传到github单独的仓库或者分支，这个可以作为hexo博客项目的备份方法。git add .git commit-m &quot;push hexo project fiels&quot;git push origin main:hexo 通过git命令把hexo项目保存在github的username.github.io仓库在本地把hexo项目纳入git管理 1234在本地新建一个目录hexo-source，用来保存hexo项目cd hexo-sourcegit init git checkout --orphan source 把博客项目复制到hexo-source目录下 123456把hexo博客项目根目录下的所有内容复制到hexo-source目录在.gitignore文件中仅保留下面三项内容（从hexo init 、hexo generate、hexo deploy这三个步骤来看，只有这三项是通过项目框架动态生成的，可以删除).从自己的实践来看，.gitignore文件是为git命令而设定的。比如，如果按照该文件默认的设置，是包含node_moudles项目的，也就是在git add &amp; git commit -m &quot;xx&quot; &amp;git push 时，不会上传node_moudles的，好处是节省带宽，但是如果上传node_moudles的话，再次git clone博客项目时，不必再次运行 npm install(也许你已经忘记了)，就可以直接开始写markdown文档，然后hexo g -d 就可以完成所有流程。 public/ .deploy*/ db.json 把博客项目推送到github仓库 12345git add .git commit -m &quot;add hexo blog project source to githut repo branch &quot;git remote add origin https://github.com/lsgxs2019/lsgxs2019.github.iogit push origin source:source ---- 推送hexo项目到username.github.io的source分支设定username.github.io仓库的默认分支为source（我这里的名称为source） 在本地恢复博客项目 1如果项目文件出错的话，就可以直接在本地使用git clone 来下载username.github.io仓库到本地，实现快速恢复，提高工作效率。 具体执行过程见下面的图片","link":"/2021/05/24/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E9%87%8D%E5%BB%BA%E4%B9%8B%E8%BF%9C%E7%A8%8B%E5%A4%87%E4%BB%BD/"},{"title":"如何成为数据工程师","text":"如何成为数据工程师(How To Become a Data Engineer)文章链接：How To Become a Data Engineer (khashtamov.com)","link":"/2021/05/16/how-to-become-data-engineer/"},{"title":"html-tips","text":"HTML TipsIn this article, I will share with you some very useful HTML tips. Enjoy! Post will be updated regularly with new tips! But first, what is HTML?Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Let’s start! 1. The loading=lazy attributePerformance tip. You can use the loading=lazy attribute to defer the loading of the image until the user scrolls to them. 1&lt;img src='image.jpg' loading='lazy' alt='Alternative Text'&gt; 2. Email, call, and SMS links:123456789101112&lt;a href=&quot;mailto:{email}?subject={subject}&amp;body={content}&quot;&gt; Send us an email&lt;/a&gt;&lt;a href=&quot;tel:{phone}&quot;&gt; Call us&lt;/a&gt;&lt;a href=&quot;sms:{phone}?body={content}&quot;&gt; Send us a message&lt;/a&gt; 3. Ordered lists start attribute.Use the start attribute to change the starting point for your ordered lists. 4. The meter elementYou can use the &lt;meter&gt; element to display quantities. No JavaScript/CSS needed. 5. HTML Native Search 6. Fieldset ElementYou can use the &lt;fieldset&gt; element to group several controls as well as labels (&lt;label&gt;) within a web form. 7. Window.openerPages opened with target=&quot;_blank&quot; allow the new page to access the original’s window.opener. This can have security and performance implications. Include rel=&quot;noopener&quot; or rel=&quot;noreferrer&quot; to prevent this. 1234&lt;a href=&quot;https://markodenic.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; Marko's website&lt;/a&gt; 8. Base ElementIf you want to open all links in the document in a new tab, you can use &lt;base&gt; element: 9. Favicon cache bustingTo refresh your website’s favicon you can force browsers to download a new version by adding ?v=2 to the filename. This is especially helpful in production to make sure the users get the new version. 12&lt;link rel=&quot;icon&quot; href=&quot;/favicon.ico?v=2&quot; /&gt; 10. The spellcheck attributeUse the spellcheck attribute to define whether the element may be checked for spelling errors. from:https://markodenic.com/html-tips/","link":"/2021/06/24/html-tips/"},{"title":"html学习笔记之html文件结构","text":"HTML语言简介html语言是网页内容的基础，以标签式的结构和内容书写Html文件，由浏览器解释这些格式标签后，将html文件的内容渲染后在浏览器呈现。现在的网页技术涉及到html、css、javascript。html负责html文件的格式和内容，css渲染网页的样式，javascript用来在html中引入编程逻辑，生成更加丰富的交互式网页。 最简单的html文件结构123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot; &gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;hello html&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; 这是html文件最基础的结构。最外层的是`&lt;html&gt;`标签对，下面是`&lt;head&gt;`对和'&lt;p&gt;'标签对，是'&lt;html&gt;'的子标签，这两个标签是并列关系。 通过这样的结构，形成了树状的结构，这棵树可大可小。 同时，每个标签包含多种属性值，以键值对的形式来书写。那是不是有点像C语言的结构体呢，定义一个结构体，然后以键值对的形式来描述各种属性 &lt;/p&gt; &lt;p&gt; 虽然这些书写内容以一定的格式呈现，这是为了可读性而规定的。 &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 在浏览器中打开html文件​ 使用最简单的windows记事本来编辑上面的内容，保存为html文件，使用浏览器打开后查看效果，感受一下结构、内容的呈现。","link":"/2021/06/20/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bhtml%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"},{"title":"markdown-links","text":"markdown文件中超链接和图片链接的书写格式 普通的文本超链接 12[hyperlinks](https://www.domain.com)hyperlinks: &lt;https://www.domain.com&gt; 图片的引用格式 1![picuture show](/images/xxx.png)","link":"/2021/06/24/markdown-links/"},{"title":"rps选股方法设置","text":"rps选股思路 对指定板块的股票，使用EXTRS技术指标，利用扩展数据的不同时间周期进行涨幅计算排序，以这些涨幅排序数据为基础输出为rps曲线，或者进行条件选股，找出强势的个股或者板块。 rps的全称：Relative Price Strength Rating 12345678910111213141516- 板块 - 上市一年以上 - 基金持股百分之三或者北向资金3000万 - 板块指数- 技术指标 - EXTRS 用来计算指定时间周期的涨幅- 扩展数据 - 120 - 250 - 50- rps曲线 - 个股的rps曲线 - 板块指数的rps曲线- 使用rps扩展数据计算结果进行条件选股- 第二阶段 - 在合适的买点买入并持有第二阶段的主升浪 rps在个股方面的应用 筛选出上市一年以上股票。在A股市场，新股一盘都是一字涨停板往上跳，没有实际的统计意义。可以通过一个条件公式来过滤出上市一年以上的股票。 新建【上市一年以上】板块。选择并打开通达信的【工具/自定义板块设置】菜单项，点击【新建板块】，输入[上市一年以上]确定即可。 新建过滤上市一年以上股票的公式。选择并打开通达信的【功能/公式系统/公式管理器】菜单项，或者使用Control+F直接打开公式管理器。选择条件选股公式—其他类型，点击新建。公式内容如下：12BARSCOUNT(C)&gt;N; N为参数，一般设为250 选股到上市一年以上板块打开通达信的【功能/选股器/条件选股】，或者使用Control+T打开条件选股，条件选股公式的下拉菜单中，选中：上市一年以上，选股范围为：沪深A股，然后点：加入条件。 1这个“上市一年以上“板块中的股票，需要手动更新，建议一个月更新一次即可 新建一个计算股票涨跌幅的技术指标 打开通达信[功能/公式系统/公式管理器]，或则使用Control+F直接打开公式管理，技术指标公式—其他类型，点击新建按钮，建立一个小公式，命名为EXTRS。公式内容如下： 12EXTRS:(C-REF(C,N))/REF(C,N);N缺省值为250 其实这个涨跌幅的数据是rps的基础数据，所有的计算都是依据这个涨跌幅进行的。比如后面的各个时间周期的rps数值扩展和个股的rps数值。 建立扩展数据，对股票涨跌幅进行排序 打开通达信软件的【功能/公式系统/扩展数据管理器】，或者直接输入【.902】打开扩展数据管理器。具体操作方法如下： 123456789101112131415161718- 选中第1条扩展数据 - 点击上图中的修改，在扩展数据属性里首先设置数据1如下： - 技术指标公式选择新建的“EXTRS”指标 - 计算参数为120（对应半年期的RPS） - 计算时段为本地所有数据 - 计算品种为“自定义板块”下面的“上市一年以上”这个板块 - 勾选“精确复权”及“生成横向排名数据” - 排名方法为“0-1000归一化顺序”- 选中第2条扩展数据 - 点击上图中的修改，在扩展数据属性里首先设置数据1如下： - 技术指标公式选择新建的“EXTRS”指标 - 计算参数为250（对应一年期的RPS） - 计算时段为本地所有数据 - 计算品种为“自定义板块”下面的“上市一年以上”这个板块 - 勾选“精确复权”及“生成横向排名数据” - 排名方法为“0-1000归一化顺序”- 可以再分别设置50、10、20、60周期的扩展数据，操作方法同上，只是时间周期不同。 建立rps幅图显示曲线 新建一个股价相对强度RPS技术指标。通达信软件，Control+F，技术指标公式—其他类型—新建。价相对强度RPS, 出两条彩线的代码如下： 1234567X:=EXTDATA_USER(1,0);{120天的}RPS120:X/10,LINETHICK2,COLORGREEN;IF(RPS120&gt;=M,RPS120,DRAWNULL),LINETHICK2,COLORRED;;Y:=EXTDATA_USER(2,0);{250天的}RPS250:Y/10,LINETHICK2,COLORWHITE;IF(RPS250&gt;=M,RPS250,DRAWNULL),LINETHICK2,COLORRED; M是参数，可以根据自己的偏好设为85-90，我个人偏好90。意思就是RPS大于90时，显示为红线。 下载财务数据 记得每天收盘后下载完整的财务数据 使用rps值进行条件选股 选出rps值大于90以上的股票 rps在板块方面的应用 新建一个【板块指数rps】的自定义板块，并导入各类板块指数。 选择通达信界面最下面的[板块指数]标签，在窗口界面中弹出鼠标右键，选择[批量/是]，选择【全选中】、【加入到板块】按钮，在打开的对话框中选择新建的板块指数rps目录即可把这些板块指数加入到新建的自定义【板块指数rps】中。 新建一个技术指标的公式。（如果前期已经设置好了个股的RPS曲线，此步骤可以不用做了！） 建立一个小公式，命名为“EXTRS”，用来计算股票涨跌幅 1234EXTRS:(C-REF(C,N))/REF(C,N);N缺省值为250 建立扩展数据 通达信软件输入：.902，进入扩展数据管理器。 选中第6条扩展数据，如下图： 鼠标左键点击“数据6”，然后点击“修改”。如下图： 技术指标公式选择新建的“EXTRS”指标 计算参数为10（对应10日的RPS） 计算时段为本地所有数据 计算品种为“自定义板块”下面的“板块指数RPS”这个板块 勾选“精确复权”及“生成横向排名数据” 排名方法为“0-1000归一化顺序” 最后点击确定。 再重复上述步骤， 在扩展数据属性里首先设置数据7，计算参数为20（对应20日的RPS）。 最后点击确定 再重复上述步骤， 在扩展数据属性里首先设置数据8，计算参数为60（对应60日的RPS）。 最后点击确定。 再新建一个技术指标公式：RPS板块。RPS板块曲线，出3条彩线的代码如下： 12345678910111213141516171819202122232425U1:=EXTDATA_USER(6,0);{10天的}RPS10:U1/10,LINETHICK2,COLORLICYAN;IF(RPS10&gt;=M,RPS10,DRAWNULL),LINETHICK2,COLORRED;W1:=EXTDATA_USER(7,0);{20天的}RPS20:W1/10,LINETHICK2,COLORBROWN;IF(RPS20&gt;=M,RPS20,DRAWNULL),LINETHICK2,COLORRED;X1:=EXTDATA_USER(8,0);{60天的}RPS60:X1/10,LINETHICK2,COLORYELLOW;IF(RPS60&gt;=M,RPS60,DRAWNULL),LINETHICK2,COLORRED;M是参数，可以根据自己的偏好设为85-90，我个人偏好90。意思就是RPS大于90时，显示为红线。 第五步，确保下载完整的历史数据 切记1：下载完整的历史数据！这个只需要操作一次。 通达信软件的菜单—系统—盘后数据下载：请自行修改下载的开始时间: 切记2：需要每天存盘下载日线数据，并全部刷新扩展数据。这个操作每天收盘后，都需要进行一次，才能显示最新的RPS曲线 最后在板块指数的K线界面输入：RPS板块。就出现三条RPS曲线了","link":"/2021/08/13/rps%E9%80%89%E8%82%A1%E6%96%B9%E6%B3%95%E8%AE%BE%E7%BD%AE/"},{"title":"todolist-2021","text":"To do list The Althttpd Webserver (sqlite.org):https://sqlite.org/althttpd/doc/trunk/althttpd.md C programming ：http://www.isthe.com/chongo/tech/comp/c/index.html Physics Notes (landgreen.github.io: https://landgreen.github.io/physics/index.html Don’t Photoshop it … MATLAB it! Image Effects with MATLAB (Part 1) » Steve on Image Processing with MATLAB - MATLAB &amp; Simulink (mathworks.com: https://blogs.mathworks.com/steve/2012/11/13/image-effects-part-1/ Data Structures in JavaScript: Arrays, HashMaps, and Lists | Adrian Mejia Blog: https://adrianmejia.com/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/ Basics of the Unix Philosophy:&lt;Basics of the Unix Philosophy (catb.org):http://www.catb.org/~esr/writings/taoup/html/ch01s06.html","link":"/2021/06/25/todolist-2021/"},{"title":"一个稳健的投资方法","text":"从优秀基本面出发，跟随趋势和泡沫这样一种投资方式：先研究好个股，长期跟踪观察，随着板块热点来临，趋势初起时建仓，待有一定涨幅后减仓，大幅降低持仓成本，基本上没有亏损的风险了了，剩下长期持有，如此循环，构建一个组合。我想按未来3~5年净利润率复合增长率（预期增长25%以上）来选股，当组合里的标的足够多，长期持有，应该可以防御个别公司业绩不及预期带来一些影响，优胜劣汰，长期坚持，看看能否获得5年3倍、10年10倍、20年100倍、—-。 这样一种长期可持续收益。组合首先立足赚优秀公司成长的钱，然后才是趋势和泡沫的钱。如我2019年建仓的昭衍新药、艾德生物、凯莱英等，2020年建仓的华熙生物、东方财富、国瓷材料等，2021年建仓的中颖电子、瑞丰新材、神工股份、中简科技等目前都还持有。这两天消费板块的行情来了，已建仓仲景食品、中炬高新等。 行情热点此起彼伏，要精准把握确实难度不小，弄不好还掉到坑里，还不如以收藏优质股权的心态来做投资，或许经常会有东方不亮西方亮的感觉，时间久了，手里持有的全是大幅盈利的股票，打开账户红彤彤一片，相信心情也会好很多。","link":"/2021/08/12/%E4%B8%80%E4%B8%AA%E7%A8%B3%E5%81%A5%E7%9A%84%E6%8A%95%E8%B5%84%E6%96%B9%E6%B3%95/"},{"title":"三线开花之通道应用","text":"三线开花的通道应用体会除了经典的三线开花应用之外，个人感觉可以利用三线的通道应用，感受股票在运行过程中的周期和波段。 三条线可以把股价分四个相邻的通道。 20线以下成为空头的通道 这个阶段就不必操作，观望即可 20线与120线之间为筑底阶段 这个阶段可以观察是否有日线级别的股价底背离， 120线与250线为启动阶段 一般有第一波上涨，到年线附近开始波段回调，最好在该通道的下沿120线附近分批买入，在一波新高后卖出部分仓位，可保留部分底部仓位。 250线之上为多头阶段 股价进入多头通道，寻找合适的股票，回调买入。","link":"/2021/08/18/%E4%B8%89%E7%BA%BF%E5%BC%80%E8%8A%B1%E4%B9%8B%E9%80%9A%E9%81%93%E5%BA%94%E7%94%A8/"},{"title":"三线开花体验之一","text":"因相信别人预测让自己过早卖出，错过了主升浪，还是要相信自己的判断。好久没有操作了，尽管没有实现自己预定的目标，但是也还错，有点盈利。拿点小钱计划完整的体验三线开花的操作。 对于三线通道还处于空头排列时，采用回档买入的方法，在波段高点卖出，在大均线附近买入。只在主升浪时耐心持有主要仓位。 三线开花之第一阶段","link":"/2021/08/12/%E4%B8%89%E7%BA%BF%E5%BC%80%E8%8A%B1%E4%BD%93%E9%AA%8C%E4%B9%8B%E4%B8%80/"},{"title":"使用Hexo在github上写博客","text":"使用Hexo在github上写博客 了解Hexo Hexo是一个简洁而强大的博客框架。使用markdown编辑器写文章，Hexo把这些markdown文章生成静态的拥有漂亮渲染效果的网页文件。 Hexo博客环境的搭建 安装Git 安装Node.js 安装Hexo(推荐在git的bash命令 窗口下安装) npm install hexo -g hexo-cli 使用Hexo建立博客站点项目 hexo init foldername cd foldername npm install 博客站点项目生成后，目录结构如下图： 下载并应用主题（Themes） 12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next themes目录下的next目录，就是下载的next主题，还需要在设置_config.yml文件应用next主题： 1234567891011# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: gitrepo: git@github.com:username/username.github.io.gitbranch: master 编辑hexo项目的配置文件_config.yml 使用Typora建立你的博客文档，保存在项目的/sourece/_posts目录下 使用Hexo的一键部署功能把整个项目上传到github pages上 install hexo-deployer-gt ```npm install hexo-deployer-git –save123456789* add the following configuration to _config.yml ```bash deploy: type: git repo: &lt;repository url&gt; # https://github.com/username/username.github.io branch: [branch] message: [message] hexo clean （如果修改了已经发布的文档，需要使用hexo clean来清理一下，会自动删除public目录和db.json文件） hexo generate or hexo g hexo deploy or hexo d hexo g -d （也可以把生成和发布组合起来一步完成：hexo g -d g 和d 没有先后顺序，不过最后一个参数前要加段横线） 在发布到username.github.io仓库之后，CNAME文件被删除了，要在username.github.io仓库的根目录下新建一个CNAME文件，把解析的内容填写好提交就可以在浏览器看到最新的内容。也可以在hexo clean &amp; hexo generate 之后，使用记事本在public目录下新建一个CNAME文件，使用hexo d之后，会把当前public目录的内容发布到username.github.io Check the webpage at username.github.io ​","link":"/2021/05/19/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/"},{"title":"路边停车","text":"路边停车在拿到驾照之前，对汽车驾驶技术很痴迷，从侧方停车到倒车入库，分析为何如此操作，甚至到搜索到了最有用的以后轮为中心的转弯半径之类的术语，才真正明白了除了直线运动之外的所有操作不过是画圆圈而已，你只需要找到这个圆心和半径。 不说这些物理意义的术语，先给自己科普一下考试驾照时的路边停车功夫，最后只是总结为四句话： 向右打方向(第一把方向，向左转动方向超过90度或者小于半把方向角度) 当引擎盖中间与马路边线快要重合时向左打方向（第二把方向，首先经历的是向左90度回正方向，然后向左90度左右) 当车身与路边线接近平行向右回正方向，此时的状态就是车身正、方向正 当你熟悉了这些操作之后，你并不知道是如何操作的，但是你每次都可以停的很好，为啥呢，是因为前边定量的训练而已到底是三把方向还是四把方向就可以搞定，我抽空再测试一下（^-^）","link":"/2021/06/21/%E5%81%9C%E8%BD%A6%E6%97%B6%E7%9A%84%E4%B8%89%E6%8A%8A%E6%96%B9%E5%90%91/"},{"title":"关于gitbub仓库的Deploy Key 和 Secrets","text":"熟悉Github仓库权限的几个要素 Token SSh Deploy key Deploy key 实际是一个限定在指定github仓库的的SSH,而不是作用域为整个github账户。 A deploy key is an SSH key that is stored on your server and grants access to a single GitHub repository. This key is attached directly to the repository instead of to a personal user account. Secrets 这个也可以看做是用在github actios 里的token。一般是先生成一个token ,保存起来，然后把这token 添加在指定仓库的secrets里，在action里可以通过变量的形式引用。 Note that these tokens have specific permissions, and that depending on what you want to do, you may need to create a Personal Access Token (PAT) and add it as a secret (ex: ACCESS_TOKEN) to use in your workflow. Authentication in a workflow - GitHub Docs","link":"/2021/05/31/%E5%85%B3%E4%BA%8Egitbub%E4%BB%93%E5%BA%93%E7%9A%84Deploy-Key-%E5%92%8C-Secrets/"},{"title":"关于hexo站点的资源文件存放","text":"Asset Folder in Hexo blogGlobal Asset FolderAssets are non-post files in the source folder, such as images, CSS or JavaScript files. For instance, If you are only going to have a few images in the Hexo project, then the easiest way is to keep them in a source/images directory. Then, you can access them using something like ![](/images/image.jpg). 可以把markdown撰写post时引用的图片文件保存在hexo项目的source/images目录下，在markdown编辑器里引用图片的格式为![img](/images/image-name.jpg or .png) Post Asset FolderFor users who expect to regularly serve images and/or other assets, and for those who prefer to separate their assets on a post-per-post basis, Hexo also provides a more organized way to manage assets. This slightly more involved, but very convenient approach to asset management can be turned on by setting the post_asset_folder setting in _config.yml to true. 1_config.ymlpost_asset_folder: true With asset folder management enabled, Hexo will create a folder every time you make a new post with the hexo new [layout] &lt;title&gt; command. This asset folder will have the same name as the markdown file associated with the post. Place all assets related to your post into the associated folder, and you will be able to reference them using a relative path, making for an easier and more convenient workflow.","link":"/2021/05/30/%E5%85%B3%E4%BA%8Ehexo%E7%AB%99%E7%82%B9%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE/"},{"title":"关于中国书法","text":"关于中国书法的简单理解 书法是中国传统文化的瑰宝，是中华文化美学的符号化表达，是书写者心性的表达。 从书法的具体形式来看，可分为篆、隶、真、行、草五种书体。 书法的练习方法。顾名思义，书法就是书写的方法，但是这样的描述远远不够。它包括笔法、字法、章法、墨法。我个人还包括心法。 笔法，就是某种书体的具体笔画的书写技法，比如隶书、楷书的起笔，运笔、收笔的具体技法。 字法，似乎没有这种叫法，其实就是单独一个字的结构。如何把握一个字的间架结构是体现书法美学的基础。 章法和墨法就是临摹和书写的一种整体布局和墨色的阴阳顿挫，是墨色的节奏。 心法则是体现书写者书写时的性情，或平稳、或流畅、或雄强、或大气磅礴等。 对于初学者，可以在结构和笔法上练习，如果方法得当就可以体会到书写的美学。如果进一步提升，则可以驾驭更好的章法或者墨法，体验美妙的书法韵律。","link":"/2021/08/09/%E5%85%B3%E4%BA%8E%E4%B8%AD%E5%9B%BD%E4%B9%A6%E6%B3%95/"},{"title":"关于股票操作的感悟","text":"操作股票的基本步骤及时选好股、等待好的买点、拿好。 选好股 就是先要把握宏观的大趋势，寻找国家政策主导的行业，在行业里寻找优质企业 好的买点需要耐心等待，对于长牛股，如果没有及时买入，需要再大周期的120周耐心等待。 在公司的前景看好，同时成长性很好，业务逻辑稳定保持的时候就拿好它，让利润奔跑，敢于盈利。 买到好的投资标的之后，不用经常的看盘 好的投资不必经常看盘 经常看盘的原因是因为你很无聊，或者是没有事情做通过频繁的交易来寻找乐趣而已。如果想两者项兼顾，就把大仓位投资在优质股票，以5年为周期的中长期持有；再小仓位买点股性比较活跃的，相对灵活的操作一下，感受大盘的趋势和波动。","link":"/2021/08/11/%E5%85%B3%E4%BA%8E%E8%82%A1%E7%A5%A8%E6%93%8D%E4%BD%9C%E7%9A%84%E6%84%9F%E6%82%9F/"},{"title":"受理岗设备维护","text":"受理岗谁设备维护现有的业务系统是基于IE浏览器的web应用，在浏览器里调用高拍仪、手写板等外部设备完成信息的采集。在受理业务量多的时候，浏览器会经常出现莫名的错误，清理浏览器的缓存也没有多大作用，因此只能重置浏览器，再重新设置参数，安装受理岗的外部设备。这样做的好处是不用再次重装Windows，节省了不少时间。下面就把重置浏览器、安装外部设备驱动、设置浏览器各项参数记录如下： 重置浏览器 在浏览器的internet选项窗口，选择【高级】选项卡，点击窗口最下部的【重置】按钮，在弹出的窗口中选择【删除个人设置复选框】，点击重置即可完成。 下载设备驱动 使用受理岗业务账号登录系统，在下载插件区域选择适合的设备驱动。目前的高拍仪是良田1660，手写板是上海馨渡。 首先安装高拍仪设备驱动，因为系统有驱动，所以会弹出安装、修复、删除三个选项的安装窗口，这里选择删除，也就是先卸载已存在的驱动 (因为浏览器重置之后，那些调用接口无法关联驱动，需要重新安装，但是因为驱动并没有卸载掉，而重置浏览器并不会卸载驱动)，卸载完成后，再次安装下载好的驱动安装包。注意在安装手写签字版的驱动后，会提示软件过期的信息，再安装一个授权文件就可以正常使用。 设置浏览器的各项参数 首先在安全标签下，选择受信任的信站点，添加业务系统登录的网址，取消服务器验证的复选框。 然后对这个受信任站点的击自定义级别进行设置。项目众多，但是我们只需要记住下面两个项目禁用的，其他的都开启就 仅允许经过批准的域在未经提示的情况下使用ActiveX 使用弹出窗口阻止程序 ​ 备注：这里的参数设置可以考虑使用脚本进行批处理设置，提高工作效率。在空闲的时候可以把脚本做好，下次维护时可以快速完成设置，轻松搞定。 批处理脚本设置IE自定义参数 经过摸索，已经成功使用批处理脚本设置IE信任站点的自定义参数设置。在重置浏览器之后，运行这个脚本即可，只是如果多次运行时，会提示已经存在，是否要覆盖，这里直接选择Yes 即可。 最后把高拍仪的驱动重新安装。第一次安装界面出现时选择卸载，再次安装即可实现设备的维护，正常工作。","link":"/2021/07/16/%E5%8F%97%E7%90%86%E5%B2%97%E8%AE%BE%E5%A4%87%E7%BB%B4%E6%8A%A4/"},{"title":"古典艺术照片网站","text":"收集古典艺术品的照片和海报古典艺术的海报","link":"/2021/06/24/%E5%8F%A4%E5%85%B8%E8%89%BA%E6%9C%AF%E7%85%A7%E7%89%87%E7%BD%91%E7%AB%99/"},{"title":"如何通过dns查询到目标网页","text":"域名的层次结构 以www.example.com为例子说明域名的层级结构。其中的.com部分叫做顶级域名(top-level domain)，.example部分为次级域名，www为主机部分。实际上在顶级域名之上还有一个层级叫做根域名root，因为完整的域名应该如下图所示： 1234主机.次级域名.顶级域名.根域名hostname.sld.tld.rootwww.example.www.root 现有的根域名，是由一个叫做 ICANN （Internet Corporation for Assigned Names and Numbers）的组织管理，总部在美国。 123456789101112131415 这个组织维护这13个根域名列表。早期的 DNS 查询结果是一个512字节的 UDP 数据包。这个包最多可以容纳13个服务器的地址，因此就规定全世界有13个根域名服务器，编号从a.root-servers.net一直到m.root-servers.net。这13台根域名服务器由12个组织独立运营。其中，Verisign 公司管理两台根域名服务器：A 和 J。每家公司为了保证根域名服务器的可用性，会部署多个节点，比如单单 Verisign 一家公司就部署了104台根域名服务器（2016年1月数据）。所以，根域名服务器其实[不止13台](https://www.icann.org/news/blog/there-are-not-13-root-servers)。据统计，截止2016年1月，全世界共有 517 台根域名服务器。你可以在 http://root-servers.org 这个网站查到所有根域名服务器的信息。根域名服务器虽然有域名，但是最少必须知道一台的 IP 地址，否则就会陷入循环查询。一般来说，本机都保存一份根域名服务器的 IP 地址的缓存，叫做 [name.cache](https://www.internic.net/zones/named.cache) 文件 由于根域名是固定的，因此，在日常的域名书写中省去了根域名部分：www.example.www* 域名是如何查询的 根据域名的层级结构特性，在本地dns服务区默认保存根域名服务器的地址，从根域名开始，采用自上而下的分层查询方法，逐级查询最终得到目标网页。 ```markdown 查询根域名列表，得到顶级域名服务器的NS记录和A记录 (ip地址) 查询顶级域名服务器，得到次级域名服务器的NS记录和A记录 (ip地址) 查询次级域名服务器地址，得到最终主机的Ip地址 每个层级域名都有自己的NS记录，这些记录指向本级的域名服务器，本级的域名服务器保存着下一级域名的NS记录，如此，就形成了一个链表式的查询路径。 层级域名 -&gt; 本级NS记录-&gt;本级域名服务器-&gt;下一级域名的NS记录-&gt;本级域名服务器","link":"/2021/05/24/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87dns%E6%9F%A5%E8%AF%A2%E5%88%B0%E7%9B%AE%E6%A0%87%E7%BD%91%E9%A1%B5/"},{"title":"守好自己的能量","text":"五音令人耳聋，无色令人眼盲。这个道理值得是外界的声色犬马对自身能量的消耗。人类的是通过五官来吸收自然界提供的能量，滋养我们自己的身心。除了大自然给我们的阳光、空气和水这些能量，人类还有一个大脑，是人类智慧的源泉。 可是，在当今信息发达的互联网时代，大量的消息令推送，并不利用我们自己的修身养性。因此，简单说，就是要少看、少听、少说，少想，多多与美丽的大自然待在一起，和自己轻松的待在一起，减少消耗，内心向善，滋养自己的精气神。 顺气自然的走好自己的旅途，一切安好。","link":"/2021/08/04/%E5%AE%88%E5%A5%BD%E8%87%AA%E5%B7%B1%E7%9A%84%E8%83%BD%E9%87%8F/"},{"title":"快乐的秘诀就是净想好事关注好事并保持行动力","text":"快乐的秘诀就是净想好事、多多关注好事。行动起来，朝着好事的方向而不断努力。别在乎 万物皆为空 外边没有人，其实只有你自己 没有什么成功和失败，谁成功了?谁又失败了？ 没有什么强和弱 就像下棋时，如果没有下一步了，就点击认输，game over，不留痕迹的开始下一个 看淡任何人事物。 增加慈悲心，宽容心当心力在波谷时，静静呆在当下，发自内心的喜悦，并保持积极的行动力；当心力上升时，积极的去思考和完成目标。 不必向外找，为自己的所有承担责任。","link":"/2021/07/22/%E5%BF%AB%E4%B9%90%E7%9A%84%E7%A7%98%E8%AF%80%E5%B0%B1%E6%98%AF%E5%87%80%E6%83%B3%E5%A5%BD%E4%BA%8B%E5%85%B3%E6%B3%A8%E5%A5%BD%E4%BA%8B%E5%B9%B6%E4%BF%9D%E6%8C%81%E8%A1%8C%E5%8A%A8%E5%8A%9B/"},{"title":"我的投资模式","text":"我的四种投资模式思考 三线开花 三线开花的多种经典模式 自己感悟的三线开花通道 欧奈尔rps选股 杯柄买入法 其他买入法（待学习） 价值投资法 寻找业绩优秀的个股，建立组合 这个模式其实可以用来防守 定投法 定投ETF 定投其他指数(待学习) ​","link":"/2021/08/18/%E6%88%91%E7%9A%84%E6%8A%95%E8%B5%84%E6%A8%A1%E5%BC%8F/"},{"title":"手动建立一个仓库的空分支","text":"和github仓库建立链接的最方便的方法是使用git clone命令把github的仓库拉取到本地。当然有时候想单独建立一个独立的分支，最后就相当于一个仓库下面的一个目录来使用，可以保存一些项目之外的资源，就当是网盘了 123456789cd dirname git init git checkout -b branch-nametouch readme.mdgit add .git commit -m &quot;create dependent branch&quot;git remote add origin git@github.com:username/username.github.io.git git push -u origin branch-name:branch-name--可能和下边有重复，将就着看，自己知道就ok 有时候需要自己手动现在本地建立一个git 分支，然后再推送到远程已存在的仓库，方法如下： 12345678910111213141516171819202122在磁盘任意位置新建一个目录 切换到新建的目录下，使用git bash here git init --在当前目录下生成.git目录树，把当前目录纳入版本管理 git checkout --orphan source --使用orphan参数来新建一个没有父节点的分支source，并自动切换到source分支下 echo &quot;create an empty branch &quot; &gt;&gt; readme.md --新建一个简单的说明文件，目的是在当前的branch下完成commit，才能真正创建这个source分支 git add . git commit -m &quot;create a orphan branch,name is source &quot; git remote add origin https://github.com/username.github.io git push -u origin source:source ---把本地新建的branch分支push 到username.github.io仓库下,名字也是source. 打开你的username.github.io仓库，就可以看到刚刚推送的独立分支source，仅仅包含一个readme.md文件根据需要，也可以在本地使用git命令把readme.md文件删除，这样source分支就是真正意义上空分支了。 在当前的.git管理的目录下手动建立新的分支，通过实践发现git checkout -b branch-name之后，有当前分支的内容，需要删除当前分支的内容，然后添加新建的分支需要包含的内容，推送到远程仓库。","link":"/2021/05/25/%E6%89%8B%E5%8A%A8%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E7%A9%BA%E5%88%86%E6%94%AF/"},{"title":"批处理设置IE浏览器可信任站点和ActiveX项目","text":"使用批处理设置IE浏览器安全站点及ActiveX各项参数 首先重置浏览器。 进入业务系统，下载插件，安装高拍仪的驱动。一般会提示带有三个项目（安装、更新、卸载）的安装界面。此时选择卸载。卸载完成后，再安装一次高拍仪的驱动即可 运行批处理设置IE的各项参数 1234567891011121314151617181920212223242526272829303132333435363738REM 添加信任站点ipreg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Ranges\\Range10&quot; /v &quot;:Range&quot; /t REG_SZ /d x.y.z.1 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Ranges\\Range10&quot; /v &quot;http&quot; /t REG_DWORD /d 2 /f REM 添加信任站点域名rem reg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\xxx.com&quot; /v &quot;http&quot; /t REG_DWORD /d &quot;2&quot; /frem reg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\xxx.cn&quot; /v &quot;http&quot; /t REG_DWORD /d &quot;2&quot; /fREM ActiveX的注册表项REM 值 设置 REM ------------------------------ REM 0 我的电脑 REM 1 本地 Intranet 区域 REM 2 受信任的站点区域 REM 3 Internet 区域 REM 4 受限制的站点区域 REM 1001 下载已签名的 ActiveX 控件 REM 1004 下载未签名的 ActiveX 控件 REM 1200 运行 ActiveX 控件和插件 REM 1201 对没有标记为安全的 ActiveX 控件进行初始化和脚本运行 REM 1405 对标记为可安全执行脚本的 ActiveX 控件执行脚本 REM 2201 ActiveX 控件自动提示reg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2&quot; /v &quot;1001&quot; /t REG_DWORD /d 0 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2&quot; /v &quot;1004&quot; /t REG_DWORD /d 0 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2&quot; /v &quot;1200&quot; /t REG_DWORD /d 0 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2&quot; /v &quot;1201&quot; /t REG_DWORD /d 0 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2&quot; /v &quot;1405&quot; /t REG_DWORD /d 0 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2&quot; /v &quot;2201&quot; /t REG_DWORD /d 0 /freg add &quot;HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\2\\ /v &quot;120B&quot; /t REG_DWORD /d 0 /fREM 弹出窗口阻止程序的注册表项 REM WshShell.RegWrite(&quot;HKCU\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\New Windows\\\\PopupMgr&quot;,&quot;no&quot;);reg add &quot;HKCU\\Software\\Microsoft\\Internet Explorer\\New Windows&quot; /v &quot;PopupMgr&quot; /t REG_SZ /d no /f 因IE浏览器只能受理少数几笔业务就会卡机，更换为360浏览器可以正常受理，如果出现浏览器异常错误信息的话，设置360浏览器的退出清除项目，及时清理浏览记录，释放缓存。","link":"/2021/07/21/%E6%89%B9%E5%A4%84%E7%90%86%E8%AE%BE%E7%BD%AEIE%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%AB%99%E7%82%B9%E5%92%8CActiveX%E9%A1%B9%E7%9B%AE/"},{"title":"明确目标并缩小学习范围","text":"每个人的时间和精力都是有限的，把注意力放在自己喜欢的内容上扔掉收藏夹里不需要的东西，把最需要的东西留下，多看几遍并输出一点自己的体会。 html css javascript linux","link":"/2021/06/29/%E6%98%8E%E7%A1%AE%E7%9B%AE%E6%A0%87%E5%B9%B6%E7%BC%A9%E5%B0%8F%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%9B%B4/"},{"title":"看上市公司财务数据的简单三个指标","text":"从营业收入和净利润出发我们知道 市值=估值*净利润，假定估值不变，市值就和净利润成正比，净利润增加越快，市值增加越快，股票价格增加越快。 如果你想依靠企业净利润的增长实现十年赚十倍的目标，必须要选择净利润复合增速大于26%的企业，因为1.26的10次方等于10。如果你想依靠企业业绩的成长实现 股价2年涨一倍的目标，就要选择净利润复合增速40%以上的企业。 我们身边熟悉的价值投资大佬水晶苍蝇拍说他选择过去3年每年营业收入增长不低于25%的企业，因为营收是利润之母，没有营收哪来利润，所以我们选择的企业最好是营收/净利润同步高增长，最好是营收增速/净利润增速均大于25%，越高越好！ 在现实生活中，我们知道很多企业营收很多，但都是白条，一大堆应收账款，就是活干了很多，但收不回来钱，这种生意是很难做下去的。 所以就需要评价企业的营收/利润质量，我通常用2个指标：第一个是净利润现金含量，指生产经营中产生的现金净流量与净利润的比值。该指标越大越好,表明销售回款能力较强，成本费用低，财务压力小。每年的净利润现金含量都大于100%为优秀，大于70%为合格。 净利润实际是财务报表做出来的，可能会被调整，有时候也不能完全反应企业的经营质量，所以我们又需要另外一个指标：收现比，即销售商品、提供劳务收到的现金与主营业务收入的比值。收现比反映了企业主营业务收入背后现金流量的支持程度。该指标越高，说明企业当期收入的变现能力越强。反之，说明企业当期账面收入高，而实际现金收入低，有很大一部分形成了应收账款。 我选股通常主要看净利润增长率/营收增长率/净利润现金含量这三个指标，这3个指标都不合格的话，直接PASS，不用再往下看了","link":"/2021/08/12/%E7%9C%8B%E4%B8%8A%E5%B8%82%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E4%B8%89%E4%B8%AA%E6%8C%87%E6%A0%87/"},{"title":"离线安装Window .net framework3.5的方法","text":"Windows10下安装dot net framework3.5的方法在线安装有网络的情况下，dot Net Framework3.5是很简单，在win10下控制面板的程序功能下，点击开启或者关闭windows功能，直接选择开启或者关闭dot net framework3.5即可。如果没有网络的情况，可以使用下面两种方法之一安装dot net framework. 离线安装 从windows官网下载 dot net framework3.5离线安装包和语言包。 完整软件包(231M)下载地址：Download Microsoft .NET Framework 3.5 Service Pack 1（完整软件包） from Official Microsoft Download Center 语言安装包下载地址：Download Microsoft .NET Framework 3.5 SP1 语言包 from Official Microsoft Download Center 解压dotnetfx35.exe，把x64系统的语言包复制到.\\dotnetfx35\\wcu\\dotNetFramework\\dotNetFX35\\x64目录下面 直接运行.\\dotnetfx35\\wcu\\dotNetFramework\\dotNetFx35setup.exe即可离线安装dot net framework3.5 使用Windows安装介质启用Windows10的dot net framework 3.5 使用管理员用户权限（以管理员身份运行）打开命令提示符。 若要从位于“D:”驱动器上的安装介质安装 .NET Framework 3.5，请使用以下命令 ： 1DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /LimitAccess /Source:d:\\sources\\sxs 使用“/All”启用指定功能的所有父功能 。 使用“/LimitAccess”阻止 DISM 与 Windows 更新/WSUS 联系 。 使用“/Source”指定还原功能所需的文件的位置 。","link":"/2021/06/09/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Window-.net-framework3.5%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"维特拉天窗的保养","text":"汽车天窗的保养方法我的维特拉目前还没有做过天窗的维护和保养。不过先记录一下保养方法，以后用得着。 清理天窗的灰尘 润滑天窗的轨道 润滑天窗的胶条 清理天窗的灰尘(此处需要干净的湿抹布一块) 天窗关闭状态，擦胶条表面的灰尘 天窗开启状态，擦一圈胶条的灰尘 润滑天窗轨道 如果感觉到开启、关闭天窗时有生涩感，说明天窗滑轨该润滑了。也可以定期保养，一般2年润滑一次。一般不要使用凡士林，容易积灰尘、不易清理。建议使用昆仑白油，一次用不了多少，购买一小盒就可以长期使用下去。车门的铰链也可以用它来润滑。 润滑天窗胶条 全车胶条的保养，一般都用矽质润滑剂（可在京东购买WD-40 高效矽质润滑剂），如果你想买便宜的润滑剂，可以买胶条润滑剂。建议半年保养一次胶条，常养常新。","link":"/2021/08/16/%E7%BB%B4%E7%89%B9%E6%8B%89%E5%A4%A9%E7%AA%97%E7%9A%84%E4%BF%9D%E5%85%BB/"},{"title":"美联储的加息预期","text":"美联储引导的加息预期 5月份经济数据传递出四大信号： 一是经济边际放缓 二是通胀高点临近，但是会高位盘整一段时间 三是紧信用带来的流动性拐点出现 四是接下来的风险因素可能跟流动性退潮有关。 好消息是中国提前开始货币政策正常化，所以这一次美元流动性的退潮，美联储的加息缩表的预期可能对我们的影响也不会那么强。 这次美联储议息会议主要讲了三点： 第一点，美国经济活动和就业指标已经开始走强。 第二个是通胀率上升，但主要反映了暂时因素。 第三个继续维持量化宽松，当经济取得进一步复苏之后，才会缩减购债规模。 美联储掌握着全球流动性的总阀门。如果美国收紧货币，美元走强，利率抬升，美元资产的吸引力会上升，全球的资本向美国本土回流，那么在一些脆弱的环节可能会引发金融危机。 美联储的货币政策“从不管他国”，所以历史上美联储的每一次加息周期都会导致全球经济薄弱环节的金融危机。80年代是拉美，1997年是东南亚。2008年美国直接把自己给引爆了，就是次贷危机。所以美联储加息这件事情，我建议大家还是要重视。 美元指数走强对我们有什么影响？客观来讲是有影响的，但影响不会像其他经济体那么大。第一，中国经济复苏的强劲程度超出大部分的经济体。第二，在去年下半年，我们的货币政策就正常化了，而且市场已经做出了一定调整，也在消化估值。所以说我们能不能扛住美联储加息，扛住全球流动性拐点，很大程度上还取决于我们自身经济金融的健康程度。 中国年初货币政策紧信用，广义流动性拐点出现，如果未来美联储减债，加息，可能意味着全球流动性拐点的出现。 我一直说股市是货币的晴雨表，比如说去年经济不好，但是货币很宽松，所以股市很好，今年开年，虽然经济很好，但股债市场都出现了调整。 有人担心未来说经济可能会下滑，但经济下滑对股市可能是好事；反而如果经济过热、滞胀，对股市可能杀伤力可能很强。 货币政策在下半年可能继续保持中性稳健，市场在今年年初是担心货币政策收紧，但下半年这种货币政策收紧的预期可能会缓解。 如果今天大家只记住两句话，我希望大家记住这两句： 第一，房地产长期看人口，跟着人口流动去买房 第二，股票市场是货币的晴雨表。 （详细参考“泽平宏观”会员课程：《股市：抓住大牛市，寻找大牛股》《房地产的终极真相与投资秘诀》） 1文章转摘至公众号：泽平宏观","link":"/2021/06/24/%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8A%A0%E6%81%AF%E9%A2%84%E6%9C%9F/"},{"title":"通俗理解通胀通俗滞涨","text":"通胀、通缩、滞胀环境下如何保住自己的财富？ 闲话少叙，先看三个事例，帮助通俗理解何为通胀、通缩、滞胀。 通胀 起初，市场上100袋大米，货币100元，1袋大米1元。 期间，央行增发100元，充足流动性有助于生产力提高，市场增加60袋大米。 最后，市场上160袋大米，货币200元，1袋大米1.25元，通胀率25%。 通缩 起初，市场上100袋大米，货币100元，1袋大米1元。 期间，需求降低，人们只愿意拿出80元消费。 后来，市场上100袋大米，货币80元，1袋大米0.8元，通缩率20% 再后来，人们看到商品价下跌，期望能在将来以更低的价格买商品，消费意愿继续降低，市场流动性逐渐降低，经济会因此而萧条崩溃。 滞胀 起初，市场上100袋大米，货币100元，1袋大米1元。 期间，央行增发100元，经济增长周期性停滞，生产力没有提高。 后来，市场上100袋大米，货币200元，1袋大米2元，通胀率100%。 以上三个事例分别解释了通胀、通缩和滞胀。 我们可以发现，这三种情况，只有通胀是比较正面的。虽然物价上涨25%，但是经济得到了发展，生产力有所提高。 通缩环境下，大家消费需求形成恶性循环逐渐下降，经济增长也随之陷入停滞萧条。而经济不增长导致大量企业倒闭，失业率上升，民众收入减少，需求进一步降低，恶性循环下最终会走向崩溃。 滞胀往往发生在长期通胀后，经济增长也周期性停滞。如果继续增发货币，会导致通胀加剧；如果加息收缩货币，长期处于货币宽松环境下的企业很可能会大规模崩溃。真是进退两难！此时只能靠财政政策刺激来走出困境。 综上，大家可以发现，长期温和的通胀是比较适宜的经济环境。 现实中，经济不可能处于长期稳定的状态，也就有了货币宽松、紧缩的周期。而从局部来看，也可能出现结构性通缩、结构性通胀的情况。 而真实的经济环境是通缩、通胀还是滞胀，其实并不能纯看统计数据。只有深处生活中的我们才会有更直观的体会。 那么这三种环境下，如何投资保住自己的财富呢？ 经济增长我们肯定是要投资股市的，毕竟股票可以认为是经济未来增长的折现。另外，就是房产投资，经济增长会带来民众真实购买力和投资需求的提升。 货币宽松的情况下，我们要投商品、黄金，生产力少即供给少，而货币供给多，实物价格会上涨。 通缩环境下，持有现金，或者投资安全性高的债券，只有货币值钱。 结合我们上面的举例，其实逻辑是比较清晰的。三种环境下的适合的投资品类如下所示。 转自： 雪球 (xueqiu.com)](https://xueqiu.com/6253866126/145336360)","link":"/2021/08/17/%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3%E9%80%9A%E8%83%80%E9%80%9A%E4%BF%97%E6%BB%9E%E6%B6%A8/"},{"title":"通胀和通缩的简单理解","text":"通胀和通缩的简单理解从一些简单的概念来说说。 通货，就是一般等价物，通常来说就是货币。 商品就是用来进行交易的产品或者服务。 通货的基本作用是帮助商品进行交易的方式，每一个商品都可以用通货来进行计价。 所以每个商品都有以货币为单位的一个价格。 通货膨胀就是指商品数量不变的情况下，货币总量增加了。 通货紧缩就是商品数量不变的情况下，货币总量减少了。 通货膨胀的结果就是商品价格上涨，通货紧缩的结果就是商品价格下降。 链接：https://www.zhihu.com/question/303211321/answer/537142320来源：知乎","link":"/2021/08/17/%E9%80%9A%E8%83%80%E5%92%8C%E9%80%9A%E7%BC%A9%E7%9A%84%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/"},{"title":"The BIOS&#x2F;MBR Boot Process","text":"NeoSmart KnowledgebaseThe BIOS/MBR Boot Process From : https://neosmart.net/wiki/mbr-boot-process/ In the diagram below, the boot sequence for all standard computers and operating systems is shown: [ As you can see, the boot process is broken down into several major components, each of which is a completely-separate subsystem with many different options and variations. The implementations of each component can differ greatly depending on your hardware and operating system, but the rules they follow and the process by which they work are always the same. Components of the Boot ProcessThe BIOSThe BIOS is where hardware meets software for the first time, and where all the boot magic begins. The BIOS code is baked into the motherboard of your PC, usually stored on what is called an EEPROM 1 and is considerably hardware-specific. The BIOS is the lowest level of software that interfaces with the hardware as a whole,2 and is the interface by means of which the bootloader and operating system kernel can communicate with and control the hardware. Through standardized calls to the BIOS (“interrupts” in computer parlance), the operating system can trigger the BIOS to read and write to the disk and interface with other hardware components. When your PC is first powered up, a lot happens. Electrical components of the PC are initially responsible for bringing your computer to life, as debouncing circuits take your push of the power button and trigger a switch that activates the power supply and directs current from the PSU to the motherboard and, mainly through it, to all the various components of your PC. As each individual component receives life-giving electricity, it is powered up and brought online to its initial state. The startup routines and overall functionality of the simpler components like the RAM and PSU is hardwired into them as a series of logic circuits (AND/NAND and OR/NOR gates), while more complicated parts such as the video card have their own microcontrollers that act as mini-CPUs, controlling the hardware and interfacing with the rest of your PC to delegate and oversee the work. The POST ProcessOnce your PC has been powered on, the BIOS begins its work as part of the POST (Power-On Self Test) process. It bridges all the various parts of your PC together, and interfaces between them as required, setting up your video display to accept basic VGA and show it on the screen, initializing the memory banks and giving your CPU access to all the hardware. It scans the IO buses for attached hardware, and identifies and maps access to the hard disks you have connected to your PC. The BIOS on newer motherboards is smart enough to even recognize and identify USB devices, such as external drives and USB mice, letting you boot from USB sticks and use your mouse in legacy software. During the POST procedure, quick tests are conducted where possible, and errors caused by incompatible hardware, disconnected devices, or failing components are often caught. It’s the BIOS that’s responsible for a variety of error messages such as “keyboard error or no keyboard present” or warnings about mismatched/unrecognized memory. At this point, the majority of the BIOS’ work has completed and it’s almost ready to move on to the next stage of the boot process. The only thing left is to run what are called “Add-On ROMs”: some hardware attached to the motherboard might require user intervention to complete its initialization and the BIOS actually hands off control of the entire PC to software routines coded into hardware like the video card or RAID controllers. They assume control of the computer and its display, and let you do things like set up RAID arrays or configure display settings before the PC has even truly finished powering up. When they’re done executing, they pass control of the computer back to the BIOS and and the PC enters a basic, usable state and is ready to begin. BIOS Boot HandoffAfter having configured the basic input and output devices of your PC, the BIOS now enters the final stages where it’s still in control of your computer. At this point, you’ll normally be presented with an option to quickly hit a key to enter the BIOS setup from where you can configure hardware settings and control how your PC boots. If you choose nothing, the BIOS will begin the first step in actually “booting” your PC using the default settings. Earlier we mentioned that an important part of the BIOS’ work is to detect and map connected hard disks. This list now comes in handy, as the BIOS will load a very small program from the first hard disk to the memory and tell the CPU to execute its contents, handing off control of the computer to whatever is on the hard drive and ending its active role in loading your PC. This hard drive is known as “the boot device,” “startup disk,” or “drive 0” and can usually be picked or set in the BIOS setup. The Boot DeviceRegardless of whether the BIOS was configured to boot from a local hard disk or from a removable USB stick, the handoff sequence is the same. Once the BIOS POST and AddOn ROM procedures have completed, the BIOS loads the first 512 bytes from the hard drive of the selected boot device – these 512 bytes are what is commonly known as the MBR, or the Master Boot Record. The Master Boot Record (MBR)The MBR is the first and most important component on the software side of things in the boot procedure on BIOS-based machines. Every hard disk has an MBR, and it contains several important pieces of information. The Partition TableFirst and foremost, the MBR contains something called the partition table, which is an index of up to four partitions that exist on the same disk, a table of contents, if you will. Without it (such as on floppy disks), the entire disk could only contain one partition, which means that you can’t have things like different filesystems on the same drive, which in turn would mean you could never install Linux and Windows on the same disk, for example. Bootstrap CodeSecondly, the MBR also contains a very important bit of code known as the “bootstrap code.” The first 4403 of these 512 bytes can contain literally anything – the BIOS will load it and execute its contents as-is, kicking off the bootloader procedure. 440 bytes is incredibly small. How small? Well, to put things in context, 440 bytes is only 0.3% of the capacity of an ancient 1.44 MiB floppy disk – barely enough to fit any form of useful code – and way, way too small to do something as complicated as call up the operating system kernel from the disk. Given how tiny the bootstrap code section of the MBR is, the only useful purpose it can really serve is to look up another file from the disk and load it to perform the actual boot process. As such, this bootstrap code is often termed a “stage one bootloader.” Depending on the operating system, the exact place the bootstrap code searches for the “stage 2 bootloader” can change, but on Windows the stage 1 bootloader will search the partition table of the MBR for a partition marked as “active” which is MBR-speak for “bootable,” indicating that the start of the partition contains the next portion of the boot code in its starting sectors (also known as its “bootsector”). On a correctly-created MBR disk, only one partition can be marked as active at a time.4 So the job of the bootstrap code segment in the MBR is pretty simple: look up the active partition from the partition table, and load that code into the memory for execution by the CPU as the next link in the boot chain. Depending on the OS you’re loading, it might actually look up a hard-coded partition instead of the active partition (e.g. always load the bootsector of the 3rd partition) and the offset of the boot code within the partition bootsector might change (e.g. instead of being the first 2 KiB of the partition, it might be the second KiB or 6 KiB starting from the 2nd multiple of the current phase of the moon) – but the basic concept remains the same. However, for legacy compatibility reasons, the MBR almost always loads the first sector of the active partition, meaning another only-512 bytes. Boot SignatureOn IBM-compatible PCs (basically, everything) the final two bytes of the 512-byte MBR are called the boot signature and are used by the BIOS to determine if the selected boot drive is actually bootable or not. On a disk that contains valid bootstrap code, the last two bytes of the MBR should always be 0x55 0xAA.5If the last two bytes of the MBR do not equal 0x55 and 0xAA respectively, the BIOS will assume that the disk is not bootable and is not a valid boot option – in this case, it will fall back to the next device in the boot order list (as configured in the BIOS setup). For example, if the first boot device in the BIOS is set as the USB stick and the second is the local hard disk, if a USB stick without the correct boot signature is plugged in, the BIOS will skip it and move on to attempt to load from the local disk. If no disk in the boot device list has the correct 0x55 0xAA boot signature, the BIOS will then display an error such as the infamous “No boot device is available” or “Reboot and select proper boot device.” The Partition Boot SectorAs covered above, the bootstrap code in the MBR will usually load a sequence of bytes from the start of the active partition. The exact layout of a partition depends what filesystem the partition has been created or formatted with, but generally looks something like this: Again, depending on the OS and filesystem, the exact layout of the partition will certainly differ. But this represents a close approximation to what you’ll normally see: A single JMP (jump) instruction, which is the assembly6 equivalent of a goto command. The filesystem header, which will contain information specific to and important for the filesystem itself. Another bootstrap code segment, containing the next stage of the bootloader process. An end-of-sector marker, very similar to the 0x55 0xAA boot signature we saw earlier in the MBR. This is all usually packed into the first sector of the partition, which is normally again only 512 bytes long, and again, can’t fit too much data or instructions. On modern filesystems for newer operating systems, the bootstrap code can take advantage of enhanced BIOS functionality to read and execute more than just 512 bytes, but in all cases, the basic steps remain the same: The MBR loads the first 512 bytes of the active partition into the memory and instructs the CPU to execute them. The very first (three) bytes of the partition bootsector contain a single JMP instruction, telling the CPU to skip xx bytes ahead and execute the next stage of the bootloader from there. The CPU follows the JMP instruction and seeks to the beginning of the bootstrap code contained within the partition bootsector, and starts to execute. The bootstrap code in the partition is not the end of the road, it’s only another step along the way. Because of how little space is allocated for the bootstrap code in the partition bootsector, the code it contains normally ends with another JMP command instructing the CPU to jump to the next sector in the partition, which is often set aside for the remainder of the partition code. Depending on the filesystem, this can be several sectors in length, or however long it needs to be to fit this stage of the bootloader. The second-stage bootloaderThe second stage of the bootloader, stored in the partition bootsector in the bootstrap section and, optionally, continuing beyond it, carries out the next step in the bootloader process: it looks up a file stored on the partition itself (as a regular file), and tells the CPU to execute its contents to begin the final part of the boot process. Unlike the previous bootstrap segments of the MBR and the partition bootsector, the next step in the boot process is not stored at a dedicated offset within the partition (i.e. the bootstrap code can’t just tell the CPU to JMP to location 0xABC and execute the boot file from there) – it’s a normal file stored amongst other normal files in the filesystem on the disk. This significantly more-complicated bootstrap code must actually read the table-of-contents for the filesystem on the partition,7 The second-stage bootloader from older versions of file systems oftentimes placed complicated restrictions on the bootloader files they needed to load, such as requiring them to appear in the first several kilobytes of the partition or being unable to load non-contiguously allocated files on the partition. This file is the last piece of the bootloader puzzle, and there are usually no restrictions as to its size or contents, meaning it can be as large and as complicated as it needs to be to load the operating system kernel from the disk and pass on control of the PC to the OS. The BootloaderThe actual bootloader files on the disk form the final parts of the boot loading process. When people talk about bootloaders and boot files, they are often referring to this final, critical step of the boot process. Once control of the PC has been handed-off from the BIOS to the bootstrap code in the MBR and from the MBR to the bootstrap code in the partition bootsector, and from there there to the executable boot files on the active partition, the actual logic involved in determining which operating system to load, where to load it from, which parameters/options to pass on to it, and completing any interactions with the user that might be available, the actual process of starting the operating system begins. Boot Configuration FilesWhile the executable bootloader files could theoretically contain hard-coded information pertaining to the operating systems to be loaded from the disk, that wouldn’t be very useful at all. As such, almost all bootloaders separate the actual, executable bootloader from the configuration file or database that contains information about the operating system(s) to load. All of the major bootloaders mentioned below have support for loading multiple operating systems, a process known as “dual-booting” or “multi-booting.” Popular BootloadersAs discussed previously, there are many different bootloaders out there. Each operating system has its own bootloader, specifically designed to read its filesystem and locate the kernel that needs to be loaded for the OS to run. Here are some of the more-popular bootloaders – and their essential configuration files – for some of the common operating systems: Each of the popular operating systems has its own default bootloader. Windows NT, 2000, and XP as well as Windows Server 2000 and Windows Server 2003 use the NTLDR bootloader. Windows Vista introduced the BOOTMGR bootloader, currently used by Windows Vista, 7, 8, and 10, as well as Windows Server 2008 and 2012. While a number of different bootloaders have existed for Linux over the years, the two predominant bootloaders were Lilo and GRUB, but now most Linux distributions have coalesced around the all-powerful GRUB2 bootloader. NTLDRNTLDR is the old Windows bootloader, first used in Windows NT (hence the “NT” in “NTLDR,” short for “NT Loader”), and currently used in Windows NT, Windows 2000, Windows XP, and Windows Server 2003. NTLDR stores its boot configuration in a simple, text-based file called BOOT.INI, stored in the root directory of the active partition (often C:\\Boot.ini). Once NTLDR is loaded and executed by the second-stage bootloader, it executes a helper program called NTDETECT.COM that identifies hardware and generates an index of information about the system. More information about NTLDR, BOOT.INI, and NTDETECT.COM can be found in the linked articles in our knowledgebase. BOOTMGRBOOTMGR is the newer version of the bootloader used by Microsoft Windows, and it was first introduced in the beta versions of Windows Vista (then Windows Codename Longhorn). It’s currently used in Windows Vista, Windows 7, Windows 8, Windows 8.1, and Windows 10, as well as Windows Server 2008 and Windows Server 2012. BOOTMGR marked a significant departure from NTLDR. It is a self-contained bootloader with many more options, especially designed to be compatible with newer functionality in modern operating systems and designed with EFI and GPT in mind (though only certain versions of BOOTMGR support loading Windows from a GPT disk or in a UEFI/EFI configuration). Unlike NTLDR, BOOTMGR stores its configuration in a file called the BCD – short for Boot Configuration Database. Unlike BOOT.INI, the BCD file is a binary database that cannot be opened and edited by hand.8 Instead, specifically designed command-line tools like bcdedit.exe and more user-friendly GUI utilities such as EasyBCD must be used to read and modify the list of operating systems. GRUBGRUB was the predominantly-used bootloader for Linux in the 1990s and early 2000s, designed to load not just Linux, but any operating system implementing the open multiboot specification for its kernel. GRUB’s configuration file containing a whitespace-formatted list of operating systems was often called menu.lst or grub.lst, and found under the /boot/ or /boot/grub/ directory. As these values could be changed by recompiling GRUB with different options, different Linux distributions had this file located under different names in different directories. GRUB 2While GRUB eventually won out over Lilo and eLilo, it was replaced with GRUB 2 around 2002, and the old GRUB was officially renamed “Legacy GRUB.” Confusingly, GRUB 2 is now officially called GRUB, while the old GRUB has officially been relegated to the name of “Legacy GRUB,” but you’ll thankfully find most resources online referring to the newer incarnation of the GRUB bootloader as GRUB 2. GRUB 2 is a powerful, modular bootloader more akin to an operating system than a bootloader. It can load dozens of different operating systems, and supports custom plugins (“modules”) to introduce more functionality and support complex boot procedures. The actual bootloader file for GRUB 2 is not a file called GRUB2, but rather a file usually called core.img. Unlike Legacy GRUB, the GRUB 2 configuration file is more of a script and less of traditional configuration file. The grub.cfg file, normally located at /boot/grub/grub.cfg on the boot partition, bears resemblance to shell scripts and supports advanced concepts like functions. The core functionality of GRUB 2 is supplemented with modules, normally found in a subdirectory of the /boot/grub/ directory. The Boot ProcessAs previously mentioned, the stage of the boot process is a little more involved than the previous steps, primarily due to the additional complexity of reading the filesystem. The bootloader must also obtain information about the underlying machine hardware (either via the BIOS or on its own) in order to correctly load the desired operating system from the correct partition and provide any additional files or data that might be needed. It must also read its own configuration file from a regular file stored on the boot partition’s filesystem, so it needs to at the very least have full read support for whatever filesystem it resides on. **Initiate filesystem access**Before anything else can happen, when the bootloader is first run it must load and run the primitive filesystem “drivers” that give it the ability to read, at the very least, the filesystem it is located on. Since it’s unable to read the filesystem before this, by necessity the code that provides this functionality must be compiled into the core bootloader file itself. **Load and read configuration file(s)**With support for the filesystem loaded, the bootloader can now read the list of operating systems from the disk and the the event that there are multiple operating systems specified, prepare it for display. **Load and run supporting modules**For bootloaders that are not wholly self-contained (such as NTLDR and GRUB 2), the bootloader now loads any supporting modules or helper programs (such as NTDETECT.COM) from the disk. The list of modules to load can be specified in the configuration file that was just read or hard-coded/compiled into the bootloader itself. Normally, each module will be executed as it is located and loaded from the disk. **Display the boot menu**At this point, with all the relevant configuration in hand, the bootloader can display what is commonly known as the boot menu on the screen. If multiple operating systems are installed, it is via the boot menu that the user of the computer can navigate a list of operating systems and choose which to load. From here, certain bootloaders also make it possible to specify run-time options, such as whether to load the selected operating system in safe mode. **Load the OS kernel**Once the user’s selection has been recorded, the bootloader moves on to the last and final stage of the boot process. Depending on the OS and the type of kernel, the bootloader will load the kernel image from the path specified in the configuration file (with the help of any submodules, if needed) into the memory. It then instructs the CPU to JMP to a certain location within the newly-loaded kernel and begin executing from there. ConclusionThus ends the lengthy journey that begins with the push of a button and ends with an operating system’s kernel loaded into the memory and executed. The bootloader process is certainly a lot more nuanced and complicated than most realize, and it has both been designed and evolved to work in a fairly-standardized fashion across different platforms and under a variety of operating systems. The individual components of the bootloader are, by and large, self-sufficient and self-contained. They can be swapped out individually without affecting the whole, meaning you can add disks and boot from different devices without worrying about upsetting existing configurations and operating systems. It also means that instead of having one, single bit of hardware/software to configure, setup, maintain, and debug, you instead are left with a intricate and oftentimes very fragile chain with multiple points susceptible to breakage and failure. When working properly, the boot process is a well-oiled machine, but when disaster strikes, it can be a very difficult process to understand and debug. Troubleshooting the BootloaderThe complicated nature of the boot process means that there’s a lot that needs to be set up and configured, and a lot that could potentially go wrong. Some resources that can come handy when troubleshooting the bootloader are listed below: Easy Recovery Essentials for Windows: a point-and-click bootable recovery CD that will recreate the entire above-described boot chain to get you back into Windows pretty much no matter what went wrong. EasyBCD: An easy-to-use utility that allows you to set up and configure a dual-boot or multi-boot between Windows, Linux, Mac, FreeBSD, and more. Super GRUB2 Disk: A bootable GRUB2 disk that can be used to boot into Linux when your GRUB or GRUB2 is misconfigured or malfunctioning. See AlsoThese additional articles and resources in our wiki and from other websites online contain additional information relevant to this topic: The EFI/GPT boot process: this document covered the basics of the BIOS/MBR boot process, now read and learn about how newer PCs with UEFI and GPT boot. The differences between EFI/GPT and BIOS/MBR Propose an edit Originally, the BIOS was stored on what was termed a ROM (“read-only memory”) chip: the BIOS code was hard-coded into the chip and could never be changed. Updates to the BIOS were rare and far in between, and could only be done by physically replacing the BIOS chip on the motherboard. Over time and with better technology, erasable ROM chips were developed that could be cleared by placing them in a box and blasting them with a dosage of UV (ultraviolet) radiation, then reprogramming their contents with ROM chip programming hardware. When that got old and tiring, electrically-erasable programmable ROM (EEPROM for short) was developed – with it, an electronic signal on specially-selected pins of the EEPROM chip would trigger an erase, and the chip could be programmed directly from where it was located on the motherboard. Easy-peasy-lemon-squeezy, as my wife would say!! ↩ Almost every major hardware component now has firmware controlling it baked into its logic hardware, but we’re ignoring microcontroller firmware here. ↩ Depending on the operating system and platform, the bootstrap code might actually only be anywhere from 434 to 446 bytes as parts of that region might be set aside for other purposes, such as the disk signature and disk timestamp. On most modern operating systems, 440 is the upper limit as the last 6 bytes are set aside for the 4-byte disk signature at offset 0x01B8 and a 2-byte field indicating the read-write state of the drive at offset 0x01BC (with 0x00 indicating read-write and 0x5A5A indicating a read-only drive). ↩ There is a huge caveat emptor here: the bootable/active flag is actually a property of the individual (one of four) partition record, and not the partition table (list of partition records) or the MBR itself. What that means is that technically the actual bit indicating that a partition is bootable can actually be present (set to a value of 0x80) one more than one (or all!) partition(s) simultaneously! This is an invalid configuration and can cause many different boot problems though! ↩ On a little-endian machine like all x86 CPUs, that would be a single word 0xAA55 while on a big-endian architecture like PowerPC, it would be read and written as 0x55AA. ↩ Assembly is the most primitive programming language, and consists of individual instructions directly read and executed by the CPU. ↩ On NTFS, this is called the master file table, or MFT for short. On FAT32, this is called the FAT (file allocation table). ↩ In fact, the BCD file is a standard Windows registry hive, and it can be mounted for editing with tools like regedit.exe","link":"/2013/07/16/Overview%20of%20the%20BIOSMBR%20Boot%20Process/"}],"tags":[{"name":"stock","slug":"stock","link":"/tags/stock/"},{"name":"coding","slug":"coding","link":"/tags/coding/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"系统维护","slug":"系统维护","link":"/tags/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"},{"name":"asset folder","slug":"asset-folder","link":"/tags/asset-folder/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"-github -git","slug":"github-git","link":"/tags/github-git/"},{"name":"-SSH -Https","slug":"SSH-Https","link":"/tags/SSH-Https/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"actions","slug":"actions","link":"/tags/actions/"},{"name":"how-to-use-hexo","slug":"how-to-use-hexo","link":"/tags/how-to-use-hexo/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"todolist","slug":"todolist","link":"/tags/todolist/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"汽车","slug":"汽车","link":"/tags/%E6%B1%BD%E8%BD%A6/"},{"name":"科目二","slug":"科目二","link":"/tags/%E7%A7%91%E7%9B%AE%E4%BA%8C/"},{"name":"书法","slug":"书法","link":"/tags/%E4%B9%A6%E6%B3%95/"},{"name":"单位系统维护","slug":"单位系统维护","link":"/tags/%E5%8D%95%E4%BD%8D%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"},{"name":"古典艺术","slug":"古典艺术","link":"/tags/%E5%8F%A4%E5%85%B8%E8%89%BA%E6%9C%AF/"},{"name":"照片","slug":"照片","link":"/tags/%E7%85%A7%E7%89%87/"},{"name":"快乐","slug":"快乐","link":"/tags/%E5%BF%AB%E4%B9%90/"},{"name":"stock、","slug":"stock、","link":"/tags/stock%E3%80%81/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"},{"name":"windows","slug":"windows","link":"/tags/windows/"},{"name":"net framework3.5","slug":"net-framework3-5","link":"/tags/net-framework3-5/"},{"name":"宏观经济","slug":"宏观经济","link":"/tags/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E/"},{"name":"股市","slug":"股市","link":"/tags/%E8%82%A1%E5%B8%82/"},{"name":"bios","slug":"bios","link":"/tags/bios/"}],"categories":[{"name":"系统维护","slug":"系统维护","link":"/categories/%E7%B3%BB%E7%BB%9F%E7%BB%B4%E6%8A%A4/"},{"name":"git","slug":"git","link":"/categories/git/"},{"name":"branch","slug":"branch","link":"/categories/branch/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"html","slug":"html","link":"/categories/html/"},{"name":"web","slug":"web","link":"/categories/web/"},{"name":"-markdown","slug":"markdown","link":"/categories/markdown/"},{"name":"stock","slug":"stock","link":"/categories/stock/"},{"name":"todolist","slug":"todolist","link":"/categories/todolist/"},{"name":"汽车","slug":"汽车","link":"/categories/%E6%B1%BD%E8%BD%A6/"},{"name":"艺术","slug":"艺术","link":"/categories/%E8%89%BA%E6%9C%AF/"},{"name":"经济","slug":"经济","link":"/categories/%E7%BB%8F%E6%B5%8E/"},{"name":"宏观经济","slug":"宏观经济","link":"/categories/%E5%AE%8F%E8%A7%82%E7%BB%8F%E6%B5%8E/"}]}