<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>明确目标并缩小学习范围</title>
      <link href="/2021/06/29/%E6%98%8E%E7%A1%AE%E7%9B%AE%E6%A0%87%E5%B9%B6%E7%BC%A9%E5%B0%8F%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%9B%B4/"/>
      <url>/2021/06/29/%E6%98%8E%E7%A1%AE%E7%9B%AE%E6%A0%87%E5%B9%B6%E7%BC%A9%E5%B0%8F%E5%AD%A6%E4%B9%A0%E8%8C%83%E5%9B%B4/</url>
      
        <content type="html"><![CDATA[<h4 id="钱不是最贵的，时间才是你最贵重的东西"><a href="#钱不是最贵的，时间才是你最贵重的东西" class="headerlink" title="钱不是最贵的，时间才是你最贵重的东西"></a>钱不是最贵的，时间才是你最贵重的东西</h4><p>扔掉收藏夹里不需要的东西，把最需要的东西留下，多看几遍并输出一点自己的体会。</p><ul><li><p>html</p></li><li><p>css</p></li><li><p>javascript</p></li><li><p>linux</p></li><li><p>python</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/29/hello-world/"/>
      <url>/2021/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>todolist-2021</title>
      <link href="/2021/06/25/todolist-2021/"/>
      <url>/2021/06/25/todolist-2021/</url>
      
        <content type="html"><![CDATA[<h4 id="To-do-list"><a href="#To-do-list" class="headerlink" title="To do list"></a>To do list</h4><ul><li><p> The Althttpd Webserver (sqlite.org):<a href="https://sqlite.org/althttpd/doc/trunk/althttpd.md">https://sqlite.org/althttpd/doc/trunk/althttpd.md</a></p></li><li><p><strong>C programming</strong> ：<a href="http://www.isthe.com/chongo/tech/comp/c/index.html">http://www.isthe.com/chongo/tech/comp/c/index.html</a></p></li><li><p><strong>Physics Notes</strong> (landgreen.github.io: <a href="https://landgreen.github.io/physics/index.html">https://landgreen.github.io/physics/index.html</a></p></li><li><p>Don’t Photoshop it … MATLAB it! Image Effects with MATLAB (Part 1) » Steve on Image Processing with MATLAB - MATLAB &amp; Simulink (mathworks.com: <a href="https://blogs.mathworks.com/steve/2012/11/13/image-effects-part-1/">https://blogs.mathworks.com/steve/2012/11/13/image-effects-part-1/</a></p></li><li><p><strong>Data Structures in JavaScript</strong>: Arrays, HashMaps, and Lists | Adrian Mejia Blog: <a href="https://adrianmejia.com/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/">https://adrianmejia.com/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/</a></p></li><li><p><strong>Basics of the Unix Philosophy</strong>:&lt;Basics of the Unix Philosophy (catb.org):<a href="http://www.catb.org/~esr/writings/taoup/html/ch01s06.html">http://www.catb.org/~esr/writings/taoup/html/ch01s06.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> todolist </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todolist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown-links</title>
      <link href="/2021/06/24/markdown-links/"/>
      <url>/2021/06/24/markdown-links/</url>
      
        <content type="html"><![CDATA[<h4 id="markdown文件中超链接和图片链接的书写格式"><a href="#markdown文件中超链接和图片链接的书写格式" class="headerlink" title="markdown文件中超链接和图片链接的书写格式"></a>markdown文件中超链接和图片链接的书写格式</h4><ul><li><p>普通的文本超链接</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[hyperlinks]</span>(<span class="attribute">https</span>:<span class="comment">//www.domain.com)</span></span><br><span class="line"><span class="attribute">hyperlinks</span>: &lt;<span class="attribute">https</span>:<span class="comment">//www.domain.com&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>图片的引用格式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![picuture show](<span class="regexp">/images/</span>xxx.png)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> -markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html-tips</title>
      <link href="/2021/06/24/html-tips/"/>
      <url>/2021/06/24/html-tips/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-Tips"><a href="#HTML-Tips" class="headerlink" title="HTML Tips"></a>HTML Tips</h2><p>In this article, I will share with you some very useful <strong>HTML tips</strong>. Enjoy! Post will be updated regularly with new tips!</p><h2 id="But-first-what-is-HTML"><a href="#But-first-what-is-HTML" class="headerlink" title="But first, what is HTML?"></a>But first, what is HTML?</h2><p>Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.</p><h3 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start!"></a>Let’s start!</h3><span id="more"></span><h3 id="1-The-loading-lazy-attribute"><a href="#1-The-loading-lazy-attribute" class="headerlink" title="1. The loading=lazy attribute"></a>1. The <code>loading=lazy</code> attribute</h3><p>Performance tip. You can use the <code>loading=lazy</code> attribute to defer the loading of the image until the user scrolls to them.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;image.jpg&#x27;</span> <span class="attr">loading</span>=<span class="string">&#x27;lazy&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;Alternative Text&#x27;</span>&gt;</span>           </span><br></pre></td></tr></table></figure><h3 id="2-Email-call-and-SMS-links"><a href="#2-Email-call-and-SMS-links" class="headerlink" title="2. Email, call, and SMS links:"></a>2. Email, call, and SMS links:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:&#123;email&#125;?subject=&#123;subject&#125;&amp;body=&#123;content&#125;&quot;</span>&gt;</span></span><br><span class="line">  Send us an email</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:&#123;phone&#125;&quot;</span>&gt;</span></span><br><span class="line">  Call us</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:&#123;phone&#125;?body=&#123;content&#125;&quot;</span>&gt;</span></span><br><span class="line">  Send us a message</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span>           </span><br></pre></td></tr></table></figure><h3 id="3-Ordered-lists-start-attribute"><a href="#3-Ordered-lists-start-attribute" class="headerlink" title="3. Ordered lists start attribute."></a>3. Ordered lists <code>start</code> attribute.</h3><p>Use the <code>start</code> attribute to change the starting point for your ordered lists.</p><p><img src="/images/html-tips/html-tag-start.png" alt="ordered lists start attribute"></p><h3 id="4-The-meter-element"><a href="#4-The-meter-element" class="headerlink" title="4. The meter element"></a>4. The <code>meter</code> element</h3><p>You can use the <code>&lt;meter&gt;</code> element to display quantities. No JavaScript/CSS needed.</p><p><img src="/images/html-tips/html-tag-meter.png" alt="meter element"></p><h3 id="5-HTML-Native-Search"><a href="#5-HTML-Native-Search" class="headerlink" title="5. HTML Native Search"></a>5. HTML Native Search</h3><p><img src="/images/html-tips/html-native-search.png"></p><h3 id="6-Fieldset-Element"><a href="#6-Fieldset-Element" class="headerlink" title="6. Fieldset Element"></a>6. Fieldset Element</h3><p>You can use the <code>&lt;fieldset&gt;</code> element to group several controls as well as labels (<code>&lt;label&gt;</code>) within a web form.</p><p><img src="/images/html-tips/html-fieldset-element.png"></p><h3 id="7-Window-opener"><a href="#7-Window-opener" class="headerlink" title="7. Window.opener"></a>7. Window.opener</h3><p>Pages opened with <code>target=&quot;_blank&quot;</code> allow the new page to access the original’s <code>window.opener</code>. This can have security and performance implications. Include <code>rel=&quot;noopener&quot;</code> or <code>rel=&quot;noreferrer&quot;</code> to prevent this.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://markodenic.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span></span><br><span class="line">Marko&#x27;s website</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span>           </span><br></pre></td></tr></table></figure><h3 id="8-Base-Element"><a href="#8-Base-Element" class="headerlink" title="8. Base Element"></a>8. Base Element</h3><p>If you want to open all links in the document in a new tab, you can use <code>&lt;base&gt;</code> element:</p><p><img src="/images/html-tags/html-base-element.png"></p><h3 id="9-Favicon-cache-busting"><a href="#9-Favicon-cache-busting" class="headerlink" title="9. Favicon cache busting"></a>9. Favicon cache busting</h3><p>To refresh your website’s favicon you can force browsers to download a new version by adding <code>?v=2</code> to the filename.</p><p>This is especially helpful in production to make sure the users get the new version.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico?v=2&quot;</span> /&gt;</span>           </span><br></pre></td></tr></table></figure><h3 id="10-The-spellcheck-attribute"><a href="#10-The-spellcheck-attribute" class="headerlink" title="10. The spellcheck attribute"></a>10. The <code>spellcheck</code> attribute</h3><p>Use the <code>spellcheck</code> attribute to define whether the element may be checked for spelling errors.</p><p><img src="/images/html-tips/tag-spellcheck.png"></p><p>from:<a href="https://markodenic.com/html-tips/">https://markodenic.com/html-tips/</a></p>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美联储的加息预期</title>
      <link href="/2021/06/24/%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8A%A0%E6%81%AF%E9%A2%84%E6%9C%9F/"/>
      <url>/2021/06/24/%E7%BE%8E%E8%81%94%E5%82%A8%E7%9A%84%E5%8A%A0%E6%81%AF%E9%A2%84%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="美联储引导的加息预期"><a href="#美联储引导的加息预期" class="headerlink" title="美联储引导的加息预期"></a>美联储引导的加息预期</h4><ul><li>5月份经济数据传递出四大信号：<ul><li>一是经济边际放缓</li><li>二是通胀高点临近，但是会高位盘整一段时间</li><li>三是紧信用带来的流动性拐点出现</li><li>四是接下来的风险因素可能跟流动性退潮有关。</li></ul></li></ul><p> 好消息是中国提前开始货币政策正常化，所以这一次美元流动性的退潮，美联储的加息缩表的预期可能对我们的影响也不会那么强。</p><span id="more"></span><ul><li>这次美联储议息会议主要讲了三点：</li><li>第一点，美国经济活动和就业指标已经开始走强。</li><li>第二个是通胀率上升，但主要反映了暂时因素。</li><li>第三个继续维持量化宽松，当经济取得进一步复苏之后，才会缩减购债规模。</li></ul><blockquote><p> 美联储掌握着全球流动性的总阀门。如果美国收紧货币，美元走强，利率抬升，美元资产的吸引力会上升，全球的资本向美国本土回流，那么在一些脆弱的环节可能会引发金融危机。</p></blockquote><p>美联储的货币政策“从不管他国”，所以历史上美联储的每一次加息周期都会导致全球经济薄弱环节的金融危机。80年代是拉美，1997年是东南亚。2008年美国直接把自己给引爆了，就是次贷危机。所以美联储加息这件事情，我建议大家还是要重视。</p><p>美元指数走强对我们有什么影响？客观来讲是有影响的，但影响不会像其他经济体那么大。第一，中国经济复苏的强劲程度超出大部分的经济体。第二，在去年下半年，我们的货币政策就正常化了，而且市场已经做出了一定调整，也在消化估值。所以说我们能不能扛住美联储加息，扛住全球流动性拐点，很大程度上还取决于我们自身经济金融的健康程度。</p><p>中国年初货币政策紧信用，广义流动性拐点出现，如果未来美联储减债，加息，可能意味着全球流动性拐点的出现。</p><blockquote><p>我一直说股市是货币的晴雨表，比如说去年经济不好，但是货币很宽松，所以股市很好，今年开年，虽然经济很好，但股债市场都出现了调整。</p></blockquote><blockquote><p>有人担心未来说经济可能会下滑，但经济下滑对股市可能是好事；反而如果经济过热、滞胀，对股市可能杀伤力可能很强。</p></blockquote><p>货币政策在下半年可能继续保持中性稳健，市场在今年年初是担心货币政策收紧，但下半年这种货币政策收紧的预期可能会缓解。</p><ul><li>如果今天大家只记住两句话，我希望大家记住这两句：<ul><li>第一，房地产长期看人口，跟着人口流动去买房</li><li>第二，股票市场是货币的晴雨表。</li><li>（详细参考“泽平宏观”会员课程：《股市：抓住大牛市，寻找大牛股》《房地产的终极真相与投资秘诀》）</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文章转摘至公众号：泽平宏观</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经济 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宏观经济 </tag>
            
            <tag> 股市 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>古典艺术照片网站</title>
      <link href="/2021/06/24/%E5%8F%A4%E5%85%B8%E8%89%BA%E6%9C%AF%E7%85%A7%E7%89%87%E7%BD%91%E7%AB%99/"/>
      <url>/2021/06/24/%E5%8F%A4%E5%85%B8%E8%89%BA%E6%9C%AF%E7%85%A7%E7%89%87%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h4 id="收集古典艺术品的照片和海报"><a href="#收集古典艺术品的照片和海报" class="headerlink" title="收集古典艺术品的照片和海报"></a>收集古典艺术品的照片和海报</h4><p><a href="https://artvee.com/">古典艺术的海报</a></p>]]></content>
      
      
      <categories>
          
          <category> 艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古典艺术 </tag>
            
            <tag> 照片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路边停车</title>
      <link href="/2021/06/21/%E5%81%9C%E8%BD%A6%E6%97%B6%E7%9A%84%E4%B8%89%E6%8A%8A%E6%96%B9%E5%90%91/"/>
      <url>/2021/06/21/%E5%81%9C%E8%BD%A6%E6%97%B6%E7%9A%84%E4%B8%89%E6%8A%8A%E6%96%B9%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/car-round.png"></p><h4 id="路边停车"><a href="#路边停车" class="headerlink" title="路边停车"></a>路边停车</h4><p>在拿到驾照之前，对汽车驾驶技术很痴迷，从侧方停车到倒车入库，分析为何如此操作，甚至到搜索到了最有用的以后轮为中心的转弯半径之类的术语，才真正明白了除了直线运动之外的所有操作不过是画圆圈而已，你只需要找到这个圆心和半径。</p><span id="more"></span><p>不说这些物理意义的术语，先给自己科普一下考试驾照时的路边停车功夫，最后只是总结为四句话：</p><ul><li><p>向右打方向(第一把方向，向左转动方向超过90度或者小于半把方向角度)</p></li><li><p>当引擎盖中间与马路边线快要重合时向左打方向（第二把方向，首先经历的是向左90度回正方向，然后向左90度左右)</p></li><li><p>当车身与路边线接近平行向右回正方向，此时的状态就是车身正、方向正</p></li></ul><h4 id="当你熟悉了这些操作之后，你并不知道是如何操作的，但是你每次都可以停的很好，为啥呢，是因为前边定量的训练而已"><a href="#当你熟悉了这些操作之后，你并不知道是如何操作的，但是你每次都可以停的很好，为啥呢，是因为前边定量的训练而已" class="headerlink" title="当你熟悉了这些操作之后，你并不知道是如何操作的，但是你每次都可以停的很好，为啥呢，是因为前边定量的训练而已"></a>当你熟悉了这些操作之后，你并不知道是如何操作的，但是你每次都可以停的很好，为啥呢，是因为前边定量的训练而已</h4><p>到底是三把方向还是四把方向就可以搞定，我抽空再测试一下（^-^）</p>]]></content>
      
      
      <categories>
          
          <category> 汽车 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汽车 </tag>
            
            <tag> 科目二 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习笔记之html文件结构</title>
      <link href="/2021/06/20/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bhtml%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2021/06/20/html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bhtml%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML语言简介"><a href="#HTML语言简介" class="headerlink" title="HTML语言简介"></a>HTML语言简介</h2><p>html语言是网页内容的基础，以标签式的结构和内容书写Html文件，由浏览器解释这些格式标签后，将html文件的内容渲染后在浏览器呈现。现在的网页技术涉及到html、css、javascript。html负责html文件的格式和内容，css渲染网页的样式，javascript用来在html中引入编程逻辑，生成更加丰富的交互式网页。</p><span id="more"></span><h2 id="最简单的html文件结构"><a href="#最简单的html文件结构" class="headerlink" title="最简单的html文件结构"></a>最简单的html文件结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">             这是html文件最基础的结构。最外层的是`<span class="tag">&lt;<span class="name">html</span>&gt;</span>`标签对，下面是`<span class="tag">&lt;<span class="name">head</span>&gt;</span>`对和&#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#x27;标签对，是&#x27;<span class="tag">&lt;<span class="name">html</span>&gt;</span>&#x27;的子标签，这两个标签是并列关系。</span><br><span class="line">             通过这样的结构，形成了树状的结构，这棵树可大可小。</span><br><span class="line">             同时，每个标签包含多种属性值，以键值对的形式来书写。那是不是有点像C语言的结构体呢，定义一个结构体，然后以键值对的形式来描述各种属性</span><br><span class="line">         </span><br><span class="line">         <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">             虽然这些书写内容以一定的格式呈现，这是为了可读性而规定的。                     </span><br><span class="line">         <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在浏览器中打开html文件"><a href="#在浏览器中打开html文件" class="headerlink" title="在浏览器中打开html文件"></a>在浏览器中打开html文件</h2><p>​    使用最简单的windows记事本来编辑上面的内容，保存为html文件，使用浏览器打开后查看效果，感受一下结构、内容的呈现。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>assets-folders</title>
      <link href="/2021/06/17/assets-folders/"/>
      <url>/2021/06/17/assets-folders/</url>
      
        <content type="html"><![CDATA[<h2 id="Global-Asset-Folder"><a href="#Global-Asset-Folder" class="headerlink" title="Global Asset Folder"></a>Global Asset Folder</h2><p>Assets are non-post files in the <code>source</code> folder, such as images, CSS or JavaScript files. For instance, If you are only going to have a few images in the Hexo project, then the easiest way is to keep them in a <code>source/images</code> directory. Then, you can access them using something like <code>![](/images/image.jpg)</code></p><span id="more"></span><h2 id="post-asset-folder"><a href="#post-asset-folder" class="headerlink" title="post asset folder"></a>post asset folder</h2><p>For users who expect to regularly serve images and/or other assets, and for those who prefer to separate their assets on a post-per-post basis, Hexo also provides a more organized way to manage assets. This slightly more involved, but very convenient approach to asset management can be turned on by setting the <code>post_asset_folder</code> setting in <code>_config.yml</code> to true.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">_config.yml</span></span><br><span class="line"><span class="emphasis">post_</span>asset<span class="emphasis">_folder: true</span></span><br></pre></td></tr></table></figure><p>With asset folder management enabled, Hexo will create a folder every time you make a new post with the <code>hexo new [layout] &lt;title&gt;</code> command. This asset folder will have the same name as the markdown file associated with the post. Place all assets related to your post into the associated folder, and you will be able to reference them using a relative path, making for an easier and more convenient workflow.</p><h2 id="Tag-Plugins-For-Relative-Path-Referencing"><a href="#Tag-Plugins-For-Relative-Path-Referencing" class="headerlink" title="Tag Plugins For Relative Path Referencing"></a>Tag Plugins For Relative Path Referencing</h2><p>Referencing images or other assets using normal markdown syntax and relative paths may lead to incorrect display on archive or index pages. Plugins have been created by the community to address this issue in Hexo 2. However, with the release of Hexo 3, several new <a href="https://hexo.io/docs/tag-plugins#Include-Assets">tag plugins</a> were added to core. These enable you to reference your assets more easily in posts:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset<span class="emphasis">_path slug %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% asset_</span>img slug [title] %&#125;</span><br><span class="line">&#123;% asset<span class="emphasis">_link slug [title] %&#125;</span></span><br></pre></td></tr></table></figure><p>For example, with post asset folders enabled, if you place an image <code>example.jpg</code> into your asset folder, it will <em>not</em> appear on the index page if you reference it using a relative path with regular <code>![](example.jpg)</code> markdown syntax (however, it will work as expected in the post itself).</p><p>The correct way to reference the image will thus be using tag plugin syntax rather than markdown:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br><span class="line">&#123;% asset_img &quot;spaced asset.jpg&quot; &quot;spaced title&quot; %&#125;</span><br></pre></td></tr></table></figure><p>This way, the image will appear both inside the post and on index and archive pages.</p><h2 id="Embedding-an-image-using-markdown"><a href="#Embedding-an-image-using-markdown" class="headerlink" title="Embedding an image using markdown"></a>Embedding an image using markdown</h2><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 introduced a new option that allows you to embed an image in markdown without using <code>asset_img</code> tag plugin.</p><p>To enable:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">_config.yml</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Once enabled, an asset image will be automatically resolved to its corresponding post’s path. For example, “image.jpg” is located at “/2020/01/02/foo/image.jpg”, meaning it is an asset image of “/2020/01/02/foo/“ post, <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code></p><p>from :  [hexo-docments](<a href="https://hexo.io/docs/asset-folders">Asset Folders | Hexo</a>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> asset folder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离线安装Window .net framework3.5的方法</title>
      <link href="/2021/06/09/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Window-.net-framework3.5%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2021/06/09/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Window-.net-framework3.5%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows10下安装dot-net-framework3-5的方法"><a href="#Windows10下安装dot-net-framework3-5的方法" class="headerlink" title="Windows10下安装dot net framework3.5的方法"></a>Windows10下安装dot net framework3.5的方法</h2><h4 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h4><p>有网络的情况下，dot Net Framework3.5是很简单，在win10下控制面板的程序功能下，点击开启或者关闭windows功能，直接选择开启或者关闭dot net framework3.5即可。如果没有网络的情况，可以使用下面两种方法之一安装dot net framework.</p><span id="more"></span><h4 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h4><ul><li><p>从windows官网下载 dot net framework3.5离线安装包和语言包。</p><ul><li>完整软件包(231M)下载地址：<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=25150">Download Microsoft .NET Framework 3.5 Service Pack 1（完整软件包） from Official Microsoft Download Center</a></li><li>语言安装包下载地址：<a href="https://www.microsoft.com/zh-cn/download/confirmation.aspx?id=21891">Download Microsoft .NET Framework 3.5 SP1 语言包 from Official Microsoft Download Center</a></li></ul></li><li><p>解压dotnetfx35.exe，把x64系统的语言包复制到.\dotnetfx35\wcu\dotNetFramework\dotNetFX35\x64目录下面</p></li><li><p>直接运行.\dotnetfx35\wcu\dotNetFramework\dotNetFx35setup.exe即可离线安装dot net framework3.5</p></li></ul><h4 id="使用Windows安装介质启用Windows10的dot-net-framework-3-5"><a href="#使用Windows安装介质启用Windows10的dot-net-framework-3-5" class="headerlink" title="使用Windows安装介质启用Windows10的dot net framework 3.5"></a>使用Windows安装介质启用Windows10的dot net framework 3.5</h4><ul><li><p>使用管理员用户权限（以管理员身份运行）打开命令提示符。</p></li><li><p>若要从位于“D:”驱动器上的安装介质安装 .NET Framework 3.5，请使用以下命令 ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /LimitAccess /Source:d:\sources\sxs</span><br></pre></td></tr></table></figure><p>使用“/All”启用指定功能的所有父功能 。</p><p>使用“/LimitAccess”阻止 DISM 与 Windows 更新/WSUS 联系 。</p><p>使用“/Source”指定还原功能所需的文件的位置 。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> net framework3.5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把Hexo生成的静态网页部署到coding上</title>
      <link href="/2021/06/08/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0coding/"/>
      <url>/2021/06/08/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0coding/</url>
      
        <content type="html"><![CDATA[<h2 id="把Hexo生成的静态网页部署到coding上"><a href="#把Hexo生成的静态网页部署到coding上" class="headerlink" title="把Hexo生成的静态网页部署到coding上"></a>把Hexo生成的静态网页部署到coding上</h2><p>因为github的网速问题，可以尝试把hexo生成的静态博客文件发布到coding上。</p><ul><li>首先注册coding账号(<a href="https://coding.net/">CODING - 一站式软件研发管理平台</a>)，并绑定腾讯云（需要实名认证）</li><li>新建5人以下团队的项目</li><li>新建代码仓库(选择devops)，可以选择添加readme文件</li><li>点击代码仓库中，在左下角显示项目设置，再选择功能开关，如果不熟悉，可以打开所有功能开关，持续集成和持续部署要选择。</li><li>在本地的git bash 命令窗口下，使用clip &lt; id_ed25519.pub ，把公钥的内容输出到剪贴板，在coding的个人账户设置里，添加公钥内容并保存。使用ssh -T  <a href="mailto:&#x67;&#x69;&#116;&#x40;&#99;&#x6f;&#x64;&#x69;&#110;&#x67;&#x2e;&#x6e;&#x65;&#x74;">&#x67;&#x69;&#116;&#x40;&#99;&#x6f;&#x64;&#x69;&#110;&#x67;&#x2e;&#x6e;&#x65;&#x74;</a>  测试ssh协议链接。</li><li> 编辑hexo博客项目根目录下的_config.yml文件，把deployer段的内容修改下面的内容：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@e.coding.net:username/myblog/hexoblog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>hexo g -d   发布到coding腾讯云空间</li><li>部署成功后，设置自定义以域名</li></ul><h3 id="部署在coding的静态网站的收费标准"><a href="#部署在coding的静态网站的收费标准" class="headerlink" title="部署在coding的静态网站的收费标准"></a>部署在coding的静态网站的收费标准</h3><ul><li>有6个月的免费试用期，后期应该是要收取费用的，具体可以查看coding 官方的资费明细</li></ul><h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><p>也可以实现自动部署博客到coding</p>]]></content>
      
      
      
        <tags>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于gitbub仓库的Deploy Key 和 Secrets</title>
      <link href="/2021/05/31/%E5%85%B3%E4%BA%8Egitbub%E4%BB%93%E5%BA%93%E7%9A%84Deploy-Key-%E5%92%8C-Secrets/"/>
      <url>/2021/05/31/%E5%85%B3%E4%BA%8Egitbub%E4%BB%93%E5%BA%93%E7%9A%84Deploy-Key-%E5%92%8C-Secrets/</url>
      
        <content type="html"><![CDATA[<h2 id="熟悉Github仓库权限的几个要素"><a href="#熟悉Github仓库权限的几个要素" class="headerlink" title="熟悉Github仓库权限的几个要素"></a>熟悉Github仓库权限的几个要素</h2><ul><li>Token</li><li>SSh</li><li>Deploy key<ul><li>Deploy key 实际是一个限定在指定github仓库的的SSH,而不是作用域为整个github账户。</li></ul></li></ul><p> A deploy key is an SSH key that is stored on your server and grants access to a single GitHub repository. This key is attached directly to the repository instead of to a personal user account.</p><ul><li>Secrets<ul><li>这个也可以看做是用在github actios 里的token。一般是先生成一个token ,保存起来，然后把这token 添加在指定仓库的secrets里，在action里可以通过变量的形式引用。</li></ul></li></ul><p><em>Note that these tokens have <a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow#permissions-for-the-github_token">specific permissions</a>, and that depending on what you want to do, you may need to create a <a href="https://github.com/settings/tokens">Personal Access Token</a> (PAT) and add it as a secret (ex: ACCESS_TOKEN) to use in your workflow.</em></p><ul><li><a href="https://docs.github.com/en/actions/reference/authentication-in-a-workflow">Authentication in a workflow - GitHub Docs</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于git与github通讯的Https协议和SSH协议</title>
      <link href="/2021/05/30/git%E4%B8%8Egithub%E9%80%9A%E8%AE%AF%E7%9A%84Https%E5%8D%8F%E8%AE%AE%E5%92%8CSSH%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/05/30/git%E4%B8%8Egithub%E9%80%9A%E8%AE%AF%E7%9A%84Https%E5%8D%8F%E8%AE%AE%E5%92%8CSSH%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="git与github通讯的Https协议和SSH协议"><a href="#git与github通讯的Https协议和SSH协议" class="headerlink" title="git与github通讯的Https协议和SSH协议"></a>git与github通讯的Https协议和SSH协议</h2><p>在安装Git后，需要使用git命令与github仓库通讯，一般由两种协议实现与git与github仓库的通讯</p><ul><li><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>如果刚刚接触git和github，使用https协议与github通讯比较容易上手，顺利实现各种git命令的操作。一般复制仓库的本地的git命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/username.gitbub.io.git </span><br><span class="line">git <span class="built_in">clone</span> 命令是多个git命令的封装，相当在本地新建立的username.github.io目录，再执行git init 纳入.git管理,自动建立一个master分支（git checkout -b master），自动添加远程连接git remote add origin https://github.com/username.gitbub.io.git，再 git fetch下载数据</span><br></pre></td></tr></table></figure><p>只是在每次都要输入用户名和邮箱，有点不方便，需要再使用git config  –global  user.name  “git用户名” 和git config –global  user.email “注册git时的邮箱”</p></li><li><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>SSH的全称时Secure Shell,通过一对加密的密钥来实现客户端和服务器的通讯。在 Git Bash 命令行窗口下，使用以下命令来生成SSH密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.ssh-keygen  -t rsa  -C <span class="string">&quot;username.com--这里是密钥的注释，一般使用邮箱可说明它的用途&quot;</span></span><br><span class="line">这里的-t rsa 参数知名密钥类型为rsa，-C 为注释。也可以再加上-f filename来指定密钥的文件名称。</span><br><span class="line">在安装git之后，使用这个命令可在默认的路径下生成id_rsa.pub和id_rsa这两个公钥和私钥文件，一般要查询他的路劲，可在git bash 命令行下输入下面的命令：</span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ls -al </span><br><span class="line">2.如果已经生成过密钥的话，就会显示这两个文件，在ssh-keygen命令中不带-f filename 参数的话，默认的文件名是id_rsa 和id_rsa.pub。</span><br><span class="line">3.在git bash命令窗口下使用clip &lt; id_rsa.pub，可以把文件的内容复制到剪贴板上，登录到github，在网站的setting下打开SSH及GPG Keys选项，titile随便自己一个，把剪贴板的内容粘贴在ssh-key里，保存即可，以后使用git 操作github仓库时就可以使用git@github.com:username/username.github.io.git的格式了，这个据说时传输数据的效率比https更高一些。</span><br><span class="line">4.如果后来又重新生成了一对密钥文件，并且把公钥的内容添加在github上之后，就要把这对密钥对应的私钥覆盖到~/.ssh目录下，这个是安装git时默认的路径，如果想修改git 使用的密钥文件的话，就要修改环境变量，不想麻烦的话，就把新生成的密钥文件改名覆盖原来的密钥对文件即可。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> -SSH -Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于hexo站点的资源文件存放</title>
      <link href="/2021/05/30/%E5%85%B3%E4%BA%8Ehexo%E7%AB%99%E7%82%B9%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE/"/>
      <url>/2021/05/30/%E5%85%B3%E4%BA%8Ehexo%E7%AB%99%E7%82%B9%E7%9A%84%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6%E5%AD%98%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="Asset-Folder-in-Hexo-blog"><a href="#Asset-Folder-in-Hexo-blog" class="headerlink" title="Asset Folder in Hexo blog"></a>Asset Folder in Hexo blog</h2><h3 id="Global-Asset-Folder"><a href="#Global-Asset-Folder" class="headerlink" title="Global Asset Folder"></a>Global Asset Folder</h3><p>Assets are non-post files in the <code>source</code> folder, such as images, CSS or JavaScript files. For instance, If you are only going to have a few images in the Hexo project, then the easiest way is to keep them in a <code>source/images</code> directory. Then, you can access them using something like <code>![](/images/image.jpg)</code>.</p><p>可以把markdown撰写post时引用的图片文件保存在hexo项目的source/images目录下，在markdown编辑器里引用图片的格式为<code>![img](/images/image-name.jpg or .png)</code></p><h3 id="Post-Asset-Folder"><a href="#Post-Asset-Folder" class="headerlink" title="Post Asset Folder"></a>Post Asset Folder</h3><p>For users who expect to regularly serve images and/or other assets, and for those who prefer to separate their assets on a post-per-post basis, Hexo also provides a more organized way to manage assets. This slightly more involved, but very convenient approach to asset management can be turned on by setting the <code>post_asset_folder</code> setting in <code>_config.yml</code> to true.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">_config.ymlpost_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>With asset folder management enabled, Hexo will create a folder every time you make a new post with the <code>hexo new [layout] &lt;title&gt;</code> command. This asset folder will have the same name as the markdown file associated with the post. Place all assets related to your post into the associated folder, and you will be able to reference them using a relative path, making for an easier and more convenient workflow.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git操作git仓库命令入门</title>
      <link href="/2021/05/28/git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/"/>
      <url>/2021/05/28/git%E5%91%BD%E4%BB%A4%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<ul><li><p>新建一个目录 branch_demo</p></li><li><p>cd branch_demo</p></li><li><p>git init </p></li><li><p>git status </p></li><li><p>git checkout -b branch-name</p></li><li><p>echo “git branch start” &gt;&gt; readme.md</p></li><li><p>git add .</p></li><li><p>git commit -m “git branch start”</p></li><li><p>git remote add origin <a href="https://github.com/usermame.github.io.git">https://github.com/usermame.github.io.git</a>    or    git remote add origin <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#111;&#x6d;</a>:username.github.io.git</p></li><li><p>git push -u origin    —-新建分支第一次推送到远程时，需要-u参数指明上游，或者使用–set-upstream,以后再推送就不需要-u参数了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo actions</title>
      <link href="/2021/05/28/hexo-actions/"/>
      <url>/2021/05/28/hexo-actions/</url>
      
        <content type="html"><![CDATA[<ul><li>actions-1</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Main</span> <span class="string">workflow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">raw</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">lts</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v2-beta</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;12.x&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prepare</span> <span class="string">build</span> <span class="string">env</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">GH_ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GH_ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">NEXT_VERSION:</span> <span class="string">v8.0.0-rc.2</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">        echo &quot;$GH_ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">        git config --global user.name &#x27;gythialy&#x27;</span></span><br><span class="line"><span class="string">        git config --global user.email &#x27;gythialy@users.noreply.github.com&#x27;</span></span><br><span class="line"><span class="string">        npm i -g hexo-cli</span></span><br><span class="line"><span class="string">        npm i</span></span><br><span class="line"><span class="string">        git clone --branch $&#123;NEXT_VERSION&#125; --depth=10  git@github.com:next-theme/hexo-theme-next.git themes/next</span></span><br><span class="line"><span class="string">        git checkout -b $&#123;NEXT_VERSION&#125;</span></span><br><span class="line"><span class="string">        git clone git@github.com:next-theme/theme-next-three --depth=1 themes/next/source/lib/three</span></span><br><span class="line"><span class="string">        git clone git@github.com:next-theme/theme-next-fancybox3  --depth=1 themes/next/source/lib/fancybox</span></span><br><span class="line"><span class="string">        git clone git@github.com:next-theme/theme-next-pace --depth=1 themes/next/source/lib/pace</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">to</span> <span class="string">github</span> </span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">HEXO_ALGOLIA_INDEXING_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_ALGOLIA_INDEXING_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo generate &amp;&amp; hexo algolia &amp;&amp; hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li><p>atcion-2</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line"><span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">source</span></span><br><span class="line"><span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line"><span class="attr">ref:</span> <span class="string">hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line"><span class="attr">with:</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_PRI</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line"><span class="string">echo</span> <span class="string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;lujiahao0708@gmail.com&quot;</span></span><br><span class="line"><span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;lujiahao0708&quot;</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">d</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitshub仓库分支重命名</title>
      <link href="/2021/05/27/gitshub%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E9%87%8D%E5%91%BD%E5%90%8D/"/>
      <url>/2021/05/27/gitshub%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E9%87%8D%E5%91%BD%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="gitshub仓库分支重命名"><a href="#gitshub仓库分支重命名" class="headerlink" title="gitshub仓库分支重命名"></a>gitshub仓库分支重命名</h4><p>在github仓库的分支操作界面改名之后，会提示在本地仓库运行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -m hexo-source <span class="built_in">source</span></span><br><span class="line">git fetch origin</span><br><span class="line">git branch -u origin/<span class="built_in">source</span> <span class="built_in">source</span></span><br><span class="line">git remote set-head origin -a</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -github -git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git对github仓库分支的操作</title>
      <link href="/2021/05/26/git%E5%AF%B9github%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/05/26/git%E5%AF%B9github%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="分支的查询"><a href="#分支的查询" class="headerlink" title="分支的查询"></a>分支的查询</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git  branch   ----查询当前分支</span><br><span class="line">git branch -a ----查询所有分支</span><br></pre></td></tr></table></figure><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch branch-name   ----新建一个名称为branch-name的分支</span><br><span class="line">git checkout --orphan  branch-name  ----新建一个名称为branch-name的无父节点的分支，并自动切换到该分支</span><br></pre></td></tr></table></figure><h4 id="分支的删除"><a href="#分支的删除" class="headerlink" title="分支的删除"></a>分支的删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在删除分支时，先要确认一下要删除的分支不是当前分支，如果时当前分支的话是不能被删除的，可以使用git checkout branch-name来切换为非当前分支，然后再删除。</span><br><span class="line">git branch -d branch-name   ----删除本地的分支</span><br><span class="line">git push  origin --delete  branch-name ----删除远程仓库分支</span><br></pre></td></tr></table></figure><h4 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m old-name new-name </span><br></pre></td></tr></table></figure><h4 id="分支的切换"><a href="#分支的切换" class="headerlink" title="分支的切换"></a>分支的切换</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branch-name </span><br></pre></td></tr></table></figure><p><img src="/images/create-empty-branch-to-github.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> branch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动建立一个仓库的空分支</title>
      <link href="/2021/05/25/%E6%89%8B%E5%8A%A8%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E7%A9%BA%E5%88%86%E6%94%AF/"/>
      <url>/2021/05/25/%E6%89%8B%E5%8A%A8%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93%E7%A9%BA%E5%88%86%E6%94%AF/</url>
      
        <content type="html"><![CDATA[<ul><li>和github仓库建立链接的最方便的方法是使用git clone命令把github的仓库拉取到本地。当然有时候想单独建立一个独立的分支，最后就相当于一个仓库下面的一个目录来使用，可以保存一些项目之外的资源，就当是网盘了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> dirname </span><br><span class="line">git init </span><br><span class="line">git checkout -b branch-name</span><br><span class="line">touch readme.md</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;create dependent branch&quot;</span></span><br><span class="line">git remote add origin  git@github.com:username/username.github.io.git  </span><br><span class="line">git push -u origin branch-name:branch-name</span><br><span class="line">--可能和下边有重复，将就着看，自己知道就ok</span><br></pre></td></tr></table></figure><ul><li>有时候需要自己手动现在本地建立一个git 分支，然后再推送到远程已存在的仓库，方法如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在磁盘任意位置新建一个目录</span><br><span class="line"></span><br><span class="line"> 切换到新建的目录下，使用git bash here</span><br><span class="line"></span><br><span class="line"> git init     --在当前目录下生成.git目录树，把当前目录纳入版本管理</span><br><span class="line"></span><br><span class="line"> git checkout --orphan <span class="built_in">source</span>    --使用orphan参数来新建一个没有父节点的分支<span class="built_in">source</span>，并自动切换到<span class="built_in">source</span>分支下</span><br><span class="line"></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;create an empty branch &quot;</span> &gt;&gt; readme.md      --新建一个简单的说明文件，目的是在当前的branch下完成commit，才能真正创建这个<span class="built_in">source</span>分支</span><br><span class="line"></span><br><span class="line"> git add .</span><br><span class="line"></span><br><span class="line"> git  commit -m <span class="string">&quot;create a orphan  branch,name is source &quot;</span></span><br><span class="line"></span><br><span class="line"> git remote add origin https://github.com/username.github.io</span><br><span class="line"></span><br><span class="line"> git push -u origin <span class="built_in">source</span>:<span class="built_in">source</span>  ---把本地新建的branch分支push 到username.github.io仓库下,名字也是<span class="built_in">source</span>.</span><br><span class="line"></span><br><span class="line"> 打开你的username.github.io仓库，就可以看到刚刚推送的独立分支<span class="built_in">source</span>，仅仅包含一个readme.md文件</span><br><span class="line"></span><br><span class="line">根据需要，也可以在本地使用git命令把readme.md文件删除，这样<span class="built_in">source</span>分支就是真正意义上空分支了。</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="/images/Create-Empty-Branch.png" alt="手动建立空的分支"></p><ul><li>在当前的.git管理的目录下手动建立新的分支，通过实践发现git checkout -b branch-name之后，有当前分支的内容，需要删除当前分支的内容，然后添加新建的分支需要包含的内容，推送到远程仓库。</li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客项目的备份和重建</title>
      <link href="/2021/05/24/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E9%87%8D%E5%BB%BA/"/>
      <url>/2021/05/24/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E9%87%8D%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客项目的备份和重建之本地备份"><a href="#hexo博客项目的备份和重建之本地备份" class="headerlink" title="hexo博客项目的备份和重建之本地备份"></a>hexo博客项目的备份和重建之本地备份</h2><ul><li>如果需要重建hexo博客项目，只需要保存你的文档目录source、你的博客主题目录themes、scaffolds目录、配置文件_config.yml。</li><li>最好把远程仓库重新clone到本地的备份目录，可能里面会有你自定义的目录，比如images保存的各种展示图片(如果使用第三方图床就不必保存)。</li><li>开始重建hexo博客项目<ul><li>hexo init </li><li>npm install</li><li>把前面备份的source、themes目录和_config.yml复制到新建立的hexo项目目录下。</li><li>hexo g</li><li>hexo server  </li><li>localhost:4000在本地查看</li><li>正常显示后发布到远程的github仓库: hexo d <ul><li>如果发布时出现ERROR Deployer not found: git 的错误提示信息，就再把hexo 一键发布包安装一下：npm install hexo-deployer-git  –save,然后再执行hexo d即可成功发布到github远程仓库，记得在仓库的根目录下新建CANME文件。</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> how-to-use-hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客项目的备份和重建之远程备份</title>
      <link href="/2021/05/24/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E9%87%8D%E5%BB%BA%E4%B9%8B%E8%BF%9C%E7%A8%8B%E5%A4%87%E4%BB%BD/"/>
      <url>/2021/05/24/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%A4%87%E4%BB%BD%E5%92%8C%E9%87%8D%E5%BB%BA%E4%B9%8B%E8%BF%9C%E7%A8%8B%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="认识hexo项目的目录结构"><a href="#认识hexo项目的目录结构" class="headerlink" title="认识hexo项目的目录结构"></a>认识hexo项目的目录结构</h4><p>使用hexo init之后，hexo会在你指定的目录下创建项目所需的目录和文件,如下图所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.github     ----</span><br><span class="line">node_modules----项目依赖的包文件</span><br><span class="line">scaffolds   ----模版文件</span><br><span class="line">soruce      ----保存用户文档</span><br><span class="line">themes      ----主题包目录</span><br><span class="line">.gitignore  ---- 指定的不纳入git管理的内容</span><br><span class="line">_config.landscape.yml----</span><br><span class="line">_config.yml ----项目配置文件</span><br><span class="line">package.json----</span><br><span class="line">package-lock.json</span><br></pre></td></tr></table></figure><span id="more"></span><p>在初始化hexo项目目录之后，基本的博客框架建立，就可以开始使用markdown编辑器书写文档，保存在source_posts目录下。</p><p>文档编辑完成后，就可以使用hexo generate 来生成静态的网页文件，所有生成的文件都保存在public目录下。这段英文来自hexo官方文档的描述:</p><blockquote><p>All generated files are saved in the <code>public</code> folder. You can copy them to wherever you like。</p></blockquote><p>此时hexo博客项目的目录下又多了public目录和db.json。db.json是以json格式的文件来保存你的博客文档的元数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.github     ----</span><br><span class="line">node_modules----项目依赖的包文件</span><br><span class="line">public      ----hexo generate 生成的所有静态网页文件及资源文件</span><br><span class="line">scaffolds   ----模版文件</span><br><span class="line">soruce      ----保存用户文档</span><br><span class="line">themes      ----主题包目录</span><br><span class="line">.gitignore  ---- 指定的不纳入git管理的内容</span><br><span class="line">_config.landscape.yml----</span><br><span class="line">_config.yml ----项目配置文件</span><br><span class="line">package.json----</span><br><span class="line">package-lock.json</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure><h4 id="在本地使用发布静态网页和备份项目文件的命令"><a href="#在本地使用发布静态网页和备份项目文件的命令" class="headerlink" title="在本地使用发布静态网页和备份项目文件的命令"></a>在本地使用发布静态网页和备份项目文件的命令</h4><p>第一步、发布文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>  第二步、备份项目文件到github仓库的指定分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用gi命令上传到github单独的仓库或者分支，这个可以作为hexo博客项目的备份方法。</span><br><span class="line">git  add .</span><br><span class="line">git commit-m <span class="string">&quot;push hexo project fiels&quot;</span></span><br><span class="line">git push origin main:hexo</span><br></pre></td></tr></table></figure><h4 id="通过git命令把hexo项目保存在github的username-github-io仓库"><a href="#通过git命令把hexo项目保存在github的username-github-io仓库" class="headerlink" title="通过git命令把hexo项目保存在github的username.github.io仓库"></a>通过git命令把hexo项目保存在github的username.github.io仓库</h4><p>在本地把hexo项目纳入git管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在本地新建一个目录hexo-source，用来保存hexo项目</span><br><span class="line"><span class="built_in">cd</span> hexo-source</span><br><span class="line">git init </span><br><span class="line">git checkout --orphan <span class="built_in">source</span> </span><br></pre></td></tr></table></figure><p>把博客项目复制到hexo-source目录下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">把hexo博客项目根目录下的所有内容复制到hexo-source目录</span><br><span class="line">在.gitignore文件中仅保留下面三项内容（从hexo init 、hexo generate、hexo deploy这三个步骤来看，只有这三项是通过项目框架动态生成的，可以删除).从自己的实践来看，.gitignore文件是为git命令而设定的。比如，如果按照该文件默认的设置，是包含node<span class="emphasis">_moudles项目的，也就是在git add &amp; git commit -m &quot;xx&quot; &amp;git push 时，不会上传node_</span>moudles的，好处是节省带宽，但是如果上传node<span class="emphasis">_moudles的话，再次git clone博客项目时，不必再次运行 npm install(也许你已经忘记了)，就可以直接开始写markdown文档，然后hexo g -d 就可以完成所有流程。</span></span><br><span class="line"><span class="emphasis">    public/</span></span><br><span class="line"><span class="emphasis">    .deploy*/</span></span><br><span class="line"><span class="emphasis">    db.json</span></span><br><span class="line"><span class="emphasis">    </span></span><br></pre></td></tr></table></figure><p>把博客项目推送到github仓库</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add hexo blog project source to githut repo branch &quot;</span></span><br><span class="line">git remote add origin https://github.com/lsgxs2019/lsgxs2019.github.io</span><br><span class="line">git push origin <span class="built_in">source</span>:<span class="built_in">source</span>   ---- 推送hexo项目到username.github.io的<span class="built_in">source</span>分支</span><br><span class="line">设定username.github.io仓库的默认分支为<span class="built_in">source</span>（我这里的名称为<span class="built_in">source</span>）</span><br></pre></td></tr></table></figure><p>在本地恢复博客项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果项目文件出错的话，就可以直接在本地使用git clone 来下载username.github.io仓库到本地，实现快速恢复，提高工作效率。</span><br></pre></td></tr></table></figure><p>具体执行过程见下面的图片</p><p><img src="/images/hexo/create-empty-branch-to-github.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何通过dns查询到目标网页</title>
      <link href="/2021/05/24/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87dns%E6%9F%A5%E8%AF%A2%E5%88%B0%E7%9B%AE%E6%A0%87%E7%BD%91%E9%A1%B5/"/>
      <url>/2021/05/24/%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87dns%E6%9F%A5%E8%AF%A2%E5%88%B0%E7%9B%AE%E6%A0%87%E7%BD%91%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<ul><li><p>域名的层次结构</p><p>以<a href="http://www.example.com为例子说明域名的层级结构.其中的.com部分叫做顶级域名/">www.example.com为例子说明域名的层级结构。其中的.com部分叫做顶级域名</a>(top-level domain)，.example部分为次级域名，www为主机部分。实际上在顶级域名之上还有一个层级叫做根域名root，因为完整的域名应该如下图所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主机.次级域名.顶级域名.根域名</span><br><span class="line">hostname.sld.tld.root</span><br><span class="line">www.example.www.root</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现有的根域名，是由一个叫做 <a href="https://www.icann.org/">ICANN</a> （Internet Corporation for Assigned Names and Numbers）的组织管理，总部在美国。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   这个组织维护这13个根域名列表。早期的 DNS 查询结果是一个512字节的 UDP 数据包。这个包最多可以容纳13个服务器的地址，因此就规定全世界有13个根域名服务器，编号从a.root-servers.net一直到m.root-servers.net。这13台根域名服务器由12个组织独立运营。其中，Verisign 公司管理两台根域名服务器：A 和 J。每家公司为了保证根域名服务器的可用性，会部署多个节点，比如单单 Verisign 一家公司就部署了104台根域名服务器（2016年1月数据）。所以，根域名服务器其实[<span class="string">不止13台</span>](<span class="link">https://www.icann.org/news/blog/there-are-not-13-root-servers</span>)。据统计，截止2016年1月，全世界共有 517 台根域名服务器。你可以在 http://root-servers.org 这个网站查到所有根域名服务器的信息。根域名服务器虽然有域名，但是最少必须知道一台的 IP 地址，否则就会陷入循环查询。一般来说，本机都保存一份根域名服务器的 IP 地址的缓存，叫做 [<span class="string">name.cache</span>](<span class="link">https://www.internic.net/zones/named.cache</span>) 文件</span><br><span class="line">  </span><br><span class="line">  由于根域名是固定的，因此，在日常的域名书写中省去了根域名部分：www.example.www</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 域名是如何查询的</span><br><span class="line"></span><br><span class="line">  根据域名的层级结构特性，在本地dns服务区默认保存根域名服务器的地址，从根域名开始，采用自上而下的分层查询方法，逐级查询最终得到目标网页。</span><br><span class="line"></span><br><span class="line">  <span class="code">```markdown</span></span><br><span class="line"><span class="code">  查询根域名列表，得到顶级域名服务器的NS记录和A记录   (ip地址)</span></span><br><span class="line"><span class="code">  查询顶级域名服务器，得到次级域名服务器的NS记录和A记录 (ip地址)</span></span><br><span class="line"><span class="code">  查询次级域名服务器地址，得到最终主机的Ip地址</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">  每个层级域名都有自己的NS记录，这些记录指向本级的域名服务器，本级的域名服务器保存着下一级域名的NS记录，如此，就形成了一个链表式的查询路径。</span></span><br><span class="line"><span class="code">  层级域名 -&gt; 本级NS记录-&gt;本级域名服务器-&gt;下一级域名的NS记录-&gt;本级域名服务器</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TestHexoWrite</title>
      <link href="/2021/05/20/HexoFrontMatter/"/>
      <url>/2021/05/20/HexoFrontMatter/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/qq_21040559/article/details/109901949">Hexo文档头模板_Slling’s Hello World-CSDN博客</a></p></blockquote><blockquote><p><a href="https://www.imooc.com/article/304251">https://www.imooc.com/article/304251</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法简介</title>
      <link href="/2021/05/19/chinese-markdown-cheatsheet/"/>
      <url>/2021/05/19/chinese-markdown-cheatsheet/</url>
      
        <content type="html"><![CDATA[<p>本中文版Markdown语法简介来自博客 <a href="https://blog.shengbin.me/posts/markdown-syntax">https://blog.shengbin.me/posts/markdown-syntax</a></p><p>Markdown语法的完整介绍在这里：<a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a>。下面整理的这些为了方便写博客时参考。</p><h3 id="分段与分行"><a href="#分段与分行" class="headerlink" title="分段与分行"></a>分段与分行</h3><p>以一个或多个空行来隔开段落；以两个或多个空格来段内换行。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">This is an H1</span></span><br><span class="line"><span class="section">=============</span></span><br><span class="line"></span><br><span class="line"><span class="section">This is an H2</span></span><br><span class="line"><span class="section">-------------</span></span><br><span class="line"></span><br><span class="line"><span class="section"># This is an H1</span></span><br><span class="line"></span><br><span class="line"><span class="section">##  This is an H2</span></span><br><span class="line"></span><br><span class="line"><span class="section">######  This is an H6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在每一行前面写一个<code>&gt;</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="quote">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span></span><br><span class="line"><span class="quote">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line"><span class="quote">&gt; id sem consectetuer libero luctus adipiscing.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p></blockquote><p>或者在每一段前面写一个<code>&gt;</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多重引用"><a href="#多重引用" class="headerlink" title="多重引用"></a>多重引用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; This is the first level of quoting.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; This is nested blockquote.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; Back to the first level.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表项占一行，以*、+、-开头即可：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span>   Red</span><br><span class="line"><span class="bullet">*</span>   Green</span><br><span class="line"><span class="bullet">*</span>   Blue</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>  Red</li><li>  Green</li><li>  Blue</li></ul><p>有序列表只需要将上述标记符换成数字加句点。而且顺序由书写顺序决定，与数字无关，但数字需要从1开始。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1\.  Bird</span><br><span class="line"><span class="bullet">3.</span>  McHale</span><br><span class="line"><span class="bullet">2.</span>  Parish</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><ol><li> Bird</li><li> McHale</li><li> Parish</li></ol><p>每一个列表项可以多行：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span>   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"><span class="bullet">*</span>   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><ul><li>  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</li><li>  Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>每一行前面缩进四个或以上个空格，就认为是开始了一段代码块。代码块内原样输出。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This is a normal paragraph:</span><br><span class="line"></span><br><span class="line"><span class="code">    This is a code block.</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><p>效果：</p><p>This is a normal paragraph:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is a code block.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h3><p>三个或更多个<code>*</code>、<code>-</code>（它们之间可以有空格）会产生横线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> <span class="emphasis">* *</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><hr><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>内嵌链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [<span class="string">Google</span>](<span class="link">http://google.com/ &quot;Google&quot;</span>)</span><br><span class="line">than from [<span class="string">Yahoo</span>](<span class="link">http://search.yahoo.com/ &quot;Yahoo Search&quot;</span>) or</span><br><span class="line">[<span class="string">MSN</span>](<span class="link">http://search.msn.com/ &quot;MSN Search&quot;</span>).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或参考文献式链接（缺省的链接标记认为与文本一致）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">I get 10 times more traffic from [Google] [1] than from</span><br><span class="line">[Yahoo] [2] or [MSN] [3].</span><br><span class="line"></span><br><span class="line">  [1]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [3]: http://search.msn.com/    &quot;MSN Search&quot;</span><br><span class="line"></span><br><span class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol"></span>] than from</span><br><span class="line">[<span class="string">Yahoo</span>][<span class="symbol"></span>] or [<span class="string">MSN</span>][<span class="symbol"></span>].</span><br><span class="line"></span><br><span class="line">  [google]: http://google.com/        &quot;Google&quot;</span><br><span class="line">  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;</span><br><span class="line">  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p><p>如果直接以链接地址作为链接文本，可以用如下快捷写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;http://www.shengbin.me&gt; 效果：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://www.shengbin.me/">http://www.shengbin.me</a></p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>单个<code>*</code>或<code>_</code>产生斜体，两个（<code>**</code>、<code>__</code>）则产生粗体。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*like*</span> <span class="emphasis">_this_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**like**</span> <span class="strong">**this**</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p><em>like</em> <em>this</em></p><p><strong>like</strong> <strong>this</strong></p><h3 id="内嵌代码"><a href="#内嵌代码" class="headerlink" title="内嵌代码"></a>内嵌代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code: <span class="code">`echo hello`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p>code: <code>echo hello</code></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片与链接类似，只需在文本前面加上感叹号<code>!</code>即可。图片位置和大小无法通过Markdown来指定。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>以下特殊字符需要用<code>\</code>转义得到。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   backslash</span><br><span class="line">`   backtick</span><br><span class="line"><span class="bullet">*</span>   asterisk</span><br><span class="line"><span class="emphasis">_   underscore</span></span><br><span class="line"><span class="emphasis">&#123;&#125;  curly braces</span></span><br><span class="line"><span class="emphasis">[]  square brackets</span></span><br><span class="line"><span class="emphasis">()  parentheses</span></span><br><span class="line"><span class="emphasis">#   hash mark</span></span><br><span class="line"><span class="emphasis">+   plus sign</span></span><br><span class="line"><span class="emphasis">-   minus sign (hyphen)</span></span><br><span class="line"><span class="emphasis">.   dot</span></span><br><span class="line"><span class="emphasis">!   exclamation mark</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Jekyll在GitHub上写博客</title>
      <link href="/2021/05/19/first-jekyll-blog/"/>
      <url>/2021/05/19/first-jekyll-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Jekyll-在GitHub上写博客"><a href="#使用Jekyll-在GitHub上写博客" class="headerlink" title="使用Jekyll 在GitHub上写博客"></a>使用Jekyll 在GitHub上写博客</h2><ul><li><p>注册一个163.com的免费邮箱（其他邮箱可自己实验，也许github对邮箱没有要求)，用来接受github发送的验证信息。</p></li><li><p>在Github上注册一个账户。</p><ul><li><p>使用注册的邮箱完成github账户的认证</p></li><li><p>在Github上新建一个仓库，仓库名称为username.github.io</p></li><li><p>注意留心一下仓库建立完毕后，github显示的关于操作github的git命令帮助文档。</p><span id="more"></span></li></ul></li><li><p>下载并安装Windows版本的Git</p><ul><li><p>了解git</p></li><li><p>打开git bash 命令窗口</p></li><li><p>在git bash 下设置与github通讯的用户名和邮箱：</p></li><li><p>在git bash 下新建一个ssh协议的密钥： ssh-keygen   -et25519   xxxxx</p></li><li><p>登陆到github上，在setting 下把新产生的ssh密钥复制并保存。</p></li><li><p>可以使用git 命令测试一下与github的链接是否成功。</p></li><li><p>此时就可以按照github提供的git命令帮助文档实现和github仓库的通讯。</p></li></ul></li><li><p>因github网络的问题，可以下载个专门的设置hosts文件的工具，有现成的很简单，在一定程度上解决网络访问问题。当然，有空的话了解一下为什么后更好。</p></li><li><p>熟悉了git 命令操作github仓库后，就可以开始学习github推荐的jekyll博客工具</p></li><li><p>jekyll的安装</p><ul><li>参考官方文档的安装帮助:<a href="https://jekyllrb.com/docs/installation/windows/">Jekyll on Windows | Jekyll • Simple, blog-aware, static sites (jekyllrb.com)</a></li><li>大致流程就是下载Windows版本的ruby安装包，安装ruby</li><li>安装jekyll</li><li>安装gem  ，gem相当于是ruby的包管理器，而jekyll就是ruby的一个应用包。关于gem ：RubyGems is a package management framework for Ruby.这是官方的描述。</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Jekyll requires the following:</span><br><span class="line"></span><br><span class="line">Ruby version 2.4.0 or higher</span><br><span class="line">RubyGems</span><br><span class="line">GCC and Make</span><br><span class="line">See Requirements for guides and details.</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Instructions</span><br><span class="line"></span><br><span class="line">1、Install all prerequisites.</span><br><span class="line">2、Install the jekyll and bundler gems.</span><br><span class="line">   <span class="code">`gem install jekyll bundler`</span></span><br><span class="line">3、Create a new Jekyll site at ./myblog.</span><br><span class="line"><span class="code">    `jekyll new myblog`</span></span><br><span class="line"><span class="code">4、Change into your new directory.</span></span><br><span class="line"><span class="code">     `cd myblog`</span></span><br><span class="line"><span class="code">5、Build the site and make it available on a local server.</span></span><br><span class="line"><span class="code">     `bundle exec jekyll serve`</span></span><br><span class="line"><span class="code">6、Browse to http://localhost:4000`</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>使用Markdown文本编辑器Typora在本地仓库_posts目录下编辑你博客文档，记得在markdown文档的最前边填写Jekyll出路文档的元数据，格式如下：</p><h2 id="markdown"><a href="#markdown" class="headerlink" title="```markdown"></a>```markdown</h2><p>layout: post<br>title: 使用Jekyll在GitHub上写博客<br>date: 2021-05-13<br>Author: xian shan<br>categories:<br>tags: [github, blog]</p><h2 id="comments-true"><a href="#comments-true" class="headerlink" title="comments: true"></a>comments: true</h2></li></ul><p>如果每次书写这些数据对不方便，可保存成一个单独的markdow文件，切换到markdown源代码视图下(Ctrl+/)，复制粘贴到文档的最顶部即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo在github上写博客</title>
      <link href="/2021/05/19/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/05/19/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8github%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="使用Hexo在github上写博客"><a href="#使用Hexo在github上写博客" class="headerlink" title="使用Hexo在github上写博客"></a>使用Hexo在github上写博客</h2><ul><li>了解Hexo</li></ul><blockquote><p>Hexo是一个简洁而强大的博客框架。使用markdown编辑器写文章，Hexo把这些markdown文章生成静态的拥有漂亮渲染效果的网页文件。</p></blockquote><ul><li><p>Hexo博客环境的搭建</p><ul><li><p>安装Git</p></li><li><p>安装Node.js</p></li><li><p>安装Hexo(推荐在git的bash命令 窗口下安装)</p><ul><li>npm install hexo  -g hexo-cli</li></ul></li></ul></li><li><p>使用Hexo建立博客站点项目</p><ul><li><p>hexo init   foldername</p></li><li><p>cd   foldername</p></li><li><p>npm install</p></li></ul></li></ul><span id="more"></span><p> 博客站点项目生成后，目录结构如下图：</p><p><img src="https://www.xianshansky.top/img/hexo/configfile.jpg" alt="img"></p><ul><li><p>下载并应用主题（Themes）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/iissnan/</span>hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><p>themes目录下的next目录，就是下载的next主题，还需要在设置_config.yml文件应用next主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: git@github.com:username/username.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li><li><p>编辑hexo项目的配置文件_config.yml</p></li><li><p>使用Typora建立你的博客文档，保存在项目的/sourece/_posts目录下</p></li><li><p>使用Hexo的一键部署功能把整个项目上传到github pages上</p><ul><li><p>install hexo-deployer-gt</p><ul><li>```<br>npm install hexo-deployer-git –save<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* add the following configuration to _config.yml</span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line"><span class="symbol">  deploy:</span></span><br><span class="line"><span class="symbol">    type:</span> git</span><br><span class="line"><span class="symbol">    repo:</span> <span class="params">&lt;repository url&gt;</span> <span class="meta"># https:<span class="comment">//github.com/username/username.github.io</span></span></span><br><span class="line"><span class="symbol">    branch:</span> [branch]</span><br><span class="line"><span class="symbol">    message:</span> [message]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>hexo clean  （如果修改了已经发布的文档，需要使用hexo clean来清理一下，会自动删除public目录和db.json文件） </p></li><li><p>hexo generate   or hexo g </p></li><li><p>hexo deploy     or hexo d      hexo g -d   （也可以把生成和发布组合起来一步完成：hexo g -d   g  和d  没有先后顺序，不过最后一个参数前要加段横线）</p></li><li><p>在发布到username.github.io仓库之后，CNAME文件被删除了，要在username.github.io仓库的根目录下新建一个CNAME文件，把解析的内容填写好提交就可以在浏览器看到最新的内容。也可以在hexo  clean &amp; hexo generate 之后，使用记事本在public目录下新建一个CNAME文件，使用hexo d之后，会把当前public目录的内容发布到username.github.io</p></li><li><p>Check the webpage at username.github.io</p></li></ul><p>​       </p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HowtoUseHexo</title>
      <link href="/2021/05/18/HowtoUseHexo/"/>
      <url>/2021/05/18/HowtoUseHexo/</url>
      
        <content type="html"><![CDATA[<ul><li><p>install node.js 和git</p></li><li><p>install hexo  （ git bash）</p></li><li><p>hexo init</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><ul><li><p> Configuration   _config.yml</p></li><li><p>write post</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new  &lt;title&gt;</span><br></pre></td></tr></table></figure></li><li><p>generate</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generat or hexo g</span><br></pre></td></tr></table></figure></li><li><p>server </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>deploy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地浏览 localhost:4000</span><br><span class="line">部署到github.com :hexo deploy  or hexo d</span><br><span class="line"> </span><br></pre></td></tr></table></figure><span id="more"></span><p>重新修改post之后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  （删除db.json数据库和由generate生成的保存html文件的public目录）</span><br><span class="line">hexo generate （重新把<span class="built_in">source</span>目录下的md文档生成每个文件夹下的index.html文件，这些文件夹都是以年月日建立的目录树，所有要发布的内容保存在public目录下）</span><br><span class="line">hexo server </span><br><span class="line">localhost:4000   </span><br><span class="line">hexo deploy  （一般要执行hexo deploy 或者hexo d,hexo deploye时， 是先清空.deploy_git目录，然后从public目录所有内容复制到到.deploy_git目录，按照_config.yml里设置的deploye参数push到远程仓库。如果自己手动在git bash 命令窗口下使用git 命令push到远程的仓库，需要推送的是public目录，而不是项目目录。如果没有完整的项目文件，可以直接使用git <span class="built_in">clone</span>把远程仓库的所有内容<span class="built_in">clone</span>到本地，修改之后在再直接push到远程，不过一不推荐这个方式，容易出错，只是通过这种方式熟悉hexo的工作流程。hexo必须把markdown文件在本地转换成html再上传到github，而github对jekyll的支持，可以直接push本地的markdown文件到github仓库，由github提供的服务把markdown转换为html。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的图片引用使用域名+站点目录的形式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">img</span>](<span class="link">https://customedns\images\xxx.jpg</span>)</span><br><span class="line">想在markdown文档中引用图片，可以把图片保存在站点根目录的images目录下。需要在运行hexo generate命令之后，把图片复制到生成的public\images目录下，然后由hexo deply把public目录复制到.deploy<span class="emphasis">_git目录，git上传到到username.github.io站点根目录下</span></span><br></pre></td></tr></table></figure><p><img src="https://www.xianshansky.top/images/after-hexo-deploy-repo-local.jpg" alt="img"></p></li></ul><p><img src="https://www.xianshansky.top/images/after-hexo-deploy-repo.jpg" alt="img"></p><p><img src="https://www.xianshansky.top/images/hexo-deploy.jpg" alt="img"></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的技术文档链接</title>
      <link href="/2021/05/17/bash-change-directory/"/>
      <url>/2021/05/17/bash-change-directory/</url>
      
        <content type="html"><![CDATA[<h2 id="有趣的技术文档链接"><a href="#有趣的技术文档链接" class="headerlink" title="有趣的技术文档链接"></a>有趣的技术文档链接</h2><ul><li>如何通过bash快速导航目录</li></ul><p>文章链接：<a href="https://mhoffman.github.io/2015/05/21/how-to-navigate-directories-with-the-shell.html">How to navigate directories faster with bash (mhoffman.github.io)</a></p><p>介绍了很炫酷的命令，在Bash shell中方便快速的切换目录</p><ul><li><p>Html boilerplate </p><p>文章链接：<a href="https://www.matuzo.at/blog/html-boilerplate/">My current HTML boilerplate </a></p><p>作者介绍了自己目前使用的 HTML 页面模板，解释了每一行的用途</p></li><li><p>微软公司的Rust教程：<a href="https://docs.microsoft.com/en-us/learn/paths/rust-first-steps/">Take your first steps with Rust - Learn | Microsoft Docs</a></p></li><li><p>最小的 Docker 镜像文件:<a href="https://devopsdirective.com/posts/2021/04/tiny-container-image/"> Building a 6kB Containerized HTTP Server!</a></p></li></ul><p> 作者介绍如何做出一个最小的 Docker 镜像文件，包含一个简单的 HTTP 服务器，大小只有 6KB</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何成为数据工程师</title>
      <link href="/2021/05/16/how-to-become-data-engineer/"/>
      <url>/2021/05/16/how-to-become-data-engineer/</url>
      
        <content type="html"><![CDATA[<h2 id="如何成为数据工程师-How-To-Become-a-Data-Engineer"><a href="#如何成为数据工程师-How-To-Become-a-Data-Engineer" class="headerlink" title="如何成为数据工程师(How To Become a Data Engineer)"></a>如何成为数据工程师(How To Become a Data Engineer)</h2><p>文章链接：<a href="https://khashtamov.com/en/how-to-become-a-data-engineer/">How To Become a Data Engineer (khashtamov.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The BIOS/MBR Boot Process</title>
      <link href="/2013/07/16/Overview%20of%20the%20BIOSMBR%20Boot%20Process/"/>
      <url>/2013/07/16/Overview%20of%20the%20BIOSMBR%20Boot%20Process/</url>
      
        <content type="html"><![CDATA[<p>NeoSmart KnowledgebaseThe BIOS/MBR Boot Process</p><p>From : <a href="https://neosmart.net/wiki/mbr-boot-process/">https://neosmart.net/wiki/mbr-boot-process/</a></p><p>In the diagram below, the boot sequence for all standard computers and operating systems is shown:</p><p>[<img src="/images/MBR-Boot-Sequence.png" alt="MBR Boot Sequence"></p><p>As you can see, the boot process is broken down into several major components, each of which is a completely-separate subsystem with many different options and variations. The implementations of each component can differ greatly depending on your hardware and operating system, but the rules they follow and the process by which they work are always the same.</p><span id="more"></span><h2 id="Components-of-the-Boot-Process"><a href="#Components-of-the-Boot-Process" class="headerlink" title="Components of the Boot Process"></a>Components of the Boot Process</h2><h3 id="The-BIOS"><a href="#The-BIOS" class="headerlink" title="The BIOS"></a>The BIOS</h3><p>The BIOS is where hardware meets software for the first time, and where all the boot magic begins. The BIOS code is baked into the motherboard of your PC, usually stored on what is called an EEPROM <a href="https://neosmart.net/wiki/mbr-boot-process/#fn1-2994">1</a> and is considerably hardware-specific. The BIOS is the lowest level of software that interfaces with the hardware as a whole,<a href="https://neosmart.net/wiki/mbr-boot-process/#fn2-2994">2</a> and is the interface by means of which the bootloader and operating system kernel can communicate with and control the hardware. Through standardized calls to the BIOS (“interrupts” in computer parlance), the operating system can trigger the BIOS to read and write to the disk and interface with other hardware components.</p><p>When your PC is first powered up, a lot happens. Electrical components of the PC are initially responsible for bringing your computer to life, as debouncing circuits take your push of the power button and trigger a switch that activates the power supply and directs current from the PSU to the motherboard and, mainly through it, to all the various components of your PC. As each individual component receives life-giving electricity, it is powered up and brought online to its initial state. The startup routines and overall functionality of the simpler components like the RAM and PSU is hardwired into them as a series of logic circuits (AND/NAND and OR/NOR gates), while more complicated parts such as the video card have their own microcontrollers that act as mini-CPUs, controlling the hardware and interfacing with the rest of your PC to delegate and oversee the work.</p><h4 id="The-POST-Process"><a href="#The-POST-Process" class="headerlink" title="The POST Process"></a>The POST Process</h4><p>Once your PC has been powered on, the BIOS begins its work as part of the POST (Power-On Self Test) process. It bridges all the various parts of your PC together, and interfaces between them as required, setting up your video display to accept basic VGA and show it on the screen, initializing the memory banks and giving your CPU access to all the hardware. It scans the IO buses for attached hardware, and identifies and maps access to the hard disks you have connected to your PC. The BIOS on newer motherboards is smart enough to even recognize and identify USB devices, such as external drives and USB mice, letting you boot from USB sticks and use your mouse in legacy software.</p><p>During the POST procedure, quick tests are conducted where possible, and errors caused by incompatible hardware, disconnected devices, or failing components are often caught. It’s the BIOS that’s responsible for a variety of error messages such as “keyboard error or no keyboard present” or warnings about mismatched/unrecognized memory. At this point, the majority of the BIOS’ work has completed and it’s almost ready to move on to the next stage of the boot process. The only thing left is to run what are called “Add-On ROMs”: some hardware attached to the motherboard might require user intervention to complete its initialization and the BIOS actually hands off control of the entire PC to software routines coded into hardware like the video card or RAID controllers. They assume control of the computer and its display, and let you do things like set up RAID arrays or configure display settings before the PC has even truly finished powering up. When they’re done executing, they pass control of the computer back to the BIOS and and the PC enters a basic, usable state and is ready to begin.</p><h4 id="BIOS-Boot-Handoff"><a href="#BIOS-Boot-Handoff" class="headerlink" title="BIOS Boot Handoff"></a>BIOS Boot Handoff</h4><p>After having configured the basic input and output devices of your PC, the BIOS now enters the final stages where it’s still in control of your computer. At this point, you’ll normally be presented with an option to quickly hit a key to enter the BIOS setup from where you can configure hardware settings and control how your PC boots. If you choose nothing, the BIOS will begin the first step in actually “booting” your PC using the default settings.</p><p>Earlier we mentioned that an important part of the BIOS’ work is to detect and map connected hard disks. This list now comes in handy, as the BIOS will load a very small program from the first hard disk to the memory and tell the CPU to execute its contents, handing off control of the computer to whatever is on the hard drive and ending its active role in loading your PC. This hard drive is known as “the boot device,” “startup disk,” or “drive 0” and can usually be picked or set in the BIOS setup.</p><h3 id="The-Boot-Device"><a href="#The-Boot-Device" class="headerlink" title="The Boot Device"></a>The Boot Device</h3><p>Regardless of whether the BIOS was configured to boot from a local hard disk or from a removable USB stick, the handoff sequence is the same. Once the BIOS POST and AddOn ROM procedures have completed, the BIOS loads the first 512 bytes from the hard drive of the selected boot device – these 512 bytes are what is commonly known as the MBR, or the Master Boot Record.</p><h3 id="The-Master-Boot-Record-MBR"><a href="#The-Master-Boot-Record-MBR" class="headerlink" title="The Master Boot Record (MBR)"></a>The Master Boot Record (MBR)</h3><p>The MBR is the first and most important component on the software side of things in the boot procedure on BIOS-based machines. Every hard disk has an MBR, and it contains several important pieces of information.</p><p><img src="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Master-Boot-Record-1024x416.png" alt="Master Boot Record"></p><h4 id="The-Partition-Table"><a href="#The-Partition-Table" class="headerlink" title="The Partition Table"></a>The Partition Table</h4><p>First and foremost, the MBR contains something called the partition table, which is an index of up to four partitions that exist on the same disk, a table of contents, if you will. Without it (such as on floppy disks), the entire disk could only contain one partition, which means that you can’t have things like different filesystems on the same drive, which in turn would mean you could never install Linux and Windows on the same disk, for example.</p><h4 id="Bootstrap-Code"><a href="#Bootstrap-Code" class="headerlink" title="Bootstrap Code"></a>Bootstrap Code</h4><p>Secondly, the MBR also contains a very important bit of code known as the “bootstrap code.” The first 440<a href="https://neosmart.net/wiki/mbr-boot-process/#fn3-2994">3</a> of these 512 bytes can contain literally anything – the BIOS will load it and execute its contents as-is, kicking off the bootloader procedure. 440 bytes is incredibly small. How small? Well, to put things in context, 440 bytes is only 0.3% of the capacity of an ancient 1.44 MiB floppy disk – barely enough to fit any form of useful code – and way, way too small to do something as complicated as call up the operating system kernel from the disk.</p><p>Given how tiny the bootstrap code section of the MBR is, the only useful purpose it can really serve is to look up another file from the disk and load it to perform the actual boot process. As such, this bootstrap code is often termed a “stage one bootloader.” Depending on the operating system, the exact place the bootstrap code searches for the “stage 2 bootloader” can change, but on Windows the stage 1 bootloader will search the partition table of the MBR for a partition marked as “active” which is MBR-speak for “bootable,” indicating that the start of the partition contains the next portion of the boot code in its starting sectors (also known as its “bootsector”). On a correctly-created MBR disk, only one partition can be marked as active at a time.<a href="https://neosmart.net/wiki/mbr-boot-process/#fn4-2994">4</a></p><p>So the job of the bootstrap code segment in the MBR is pretty simple: look up the active partition from the partition table, and load that code into the memory for execution by the CPU as the next link in the boot chain. Depending on the OS you’re loading, it might actually look up a hard-coded partition instead of the active partition (e.g. always load the bootsector of the 3rd partition) and the offset of the boot code within the partition bootsector might change (e.g. instead of being the first 2 KiB of the partition, it might be the second KiB or 6 KiB starting from the 2nd multiple of the current phase of the moon) – but the basic concept remains the same. However, for legacy compatibility reasons, the MBR almost always loads the first sector of the active partition, meaning another only-512 bytes.</p><h4 id="Boot-Signature"><a href="#Boot-Signature" class="headerlink" title="Boot Signature"></a>Boot Signature</h4><p>On IBM-compatible PCs (basically, everything) the final two bytes of the 512-byte MBR are called the <em>boot signature</em> and are used by the BIOS to determine if the selected boot drive is actually bootable or not. On a disk that contains valid bootstrap code, the last two bytes of the MBR should always be 0x55 0xAA.<a href="https://neosmart.net/wiki/mbr-boot-process/#fn5-2994">5</a>If the last two bytes of the MBR do not equal 0x55 and 0xAA respectively, the BIOS will assume that the disk is <em>not</em> bootable and is not a valid boot option – in this case, it will fall back to the next device in the boot order list (as configured in the BIOS setup). For example, if the first boot device in the BIOS is set as the USB stick and the second is the local hard disk, if a USB stick without the correct boot signature is plugged in, the BIOS will skip it and move on to attempt to load from the local disk. If no disk in the boot device list has the correct 0x55 0xAA boot signature, the BIOS will then display an error such as the infamous “No boot device is available” or “Reboot and select proper boot device.”</p><h3 id="The-Partition-Boot-Sector"><a href="#The-Partition-Boot-Sector" class="headerlink" title="The Partition Boot Sector"></a>The Partition Boot Sector</h3><p>As covered above, the bootstrap code in the MBR will usually load a sequence of bytes from the start of the active partition. The exact layout of a partition depends what filesystem the partition has been created or formatted with, but generally looks something like this:</p><p><a href="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Partition-on-Disk.png"><img src="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Partition-on-Disk.png" alt="Partition on Disk"></a></p><p>Again, depending on the OS and filesystem, the exact layout of the partition will certainly differ. But this represents a close approximation to what you’ll normally see:</p><ul><li>A single JMP (jump) instruction, which is the assembly<a href="https://neosmart.net/wiki/mbr-boot-process/#fn6-2994">6</a> equivalent of a <em>goto</em> command.</li><li>The filesystem header, which will contain information specific to and important for the filesystem itself.</li><li>Another bootstrap code segment, containing the next stage of the bootloader process.</li><li>An end-of-sector marker, very similar to the 0x55 0xAA boot signature we saw earlier in the MBR.</li></ul><p>This is all usually packed into the first sector of the partition, which is normally again only 512 bytes long, and again, can’t fit too much data or instructions. On modern filesystems for newer operating systems, the bootstrap code can take advantage of enhanced BIOS functionality to read and execute more than just 512 bytes, but in all cases, the basic steps remain the same:</p><ol><li>The MBR loads the first 512 bytes of the active partition into the memory and instructs the CPU to execute them.</li><li>The very first (three) bytes of the partition bootsector contain a single JMP instruction, telling the CPU to skip xx bytes ahead and execute the next stage of the bootloader from there.</li><li>The CPU follows the JMP instruction and seeks to the beginning of the bootstrap code contained within the partition bootsector, and starts to execute.</li></ol><p>The bootstrap code in the partition is not the end of the road, it’s only another step along the way. Because of how little space is allocated for the bootstrap code in the partition bootsector, the code it contains normally ends with another JMP command instructing the CPU to jump to the <em>next</em> sector in the partition, which is often set aside for the remainder of the partition code. Depending on the filesystem, this can be several sectors in length, or however long it needs to be to fit this stage of the bootloader.</p><h4 id="The-second-stage-bootloader"><a href="#The-second-stage-bootloader" class="headerlink" title="The second-stage bootloader"></a>The second-stage bootloader</h4><p>The second stage of the bootloader, stored in the partition bootsector in the bootstrap section and, optionally, continuing beyond it, carries out the next step in the bootloader process: it looks up a file stored on the partition itself (as a regular file), and tells the CPU to execute its contents to begin the final part of the boot process.</p><p>Unlike the previous bootstrap segments of the MBR and the partition bootsector, the next step in the boot process is not stored at a dedicated offset within the partition (i.e. the bootstrap code can’t just tell the CPU to JMP to location 0xABC and execute the boot file from there) – it’s a normal file stored amongst other normal files in the filesystem on the disk.</p><p>This significantly more-complicated bootstrap code must actually read the table-of-contents for the filesystem on the partition,<a href="https://neosmart.net/wiki/mbr-boot-process/#fn7-2994">7</a> The second-stage bootloader from older versions of file systems oftentimes placed complicated restrictions on the bootloader files they needed to load, such as requiring them to appear in the first several kilobytes of the partition or being unable to load non-contiguously allocated files on the partition. This file is the last piece of the bootloader puzzle, and there are usually no restrictions as to its size or contents, meaning it can be as large and as complicated as it needs to be to load the operating system kernel from the disk and pass on control of the PC to the OS.</p><h3 id="The-Bootloader"><a href="#The-Bootloader" class="headerlink" title="The Bootloader"></a>The Bootloader</h3><p>The actual bootloader files on the disk form the final parts of the boot loading process. When people talk about bootloaders and boot files, they are often referring to this final, critical step of the boot process.</p><p><a href="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Bootloader-Sequence.png"><img src="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Bootloader-Sequence-1024x426.png" alt="Bootloader Sequence"></a></p><p>Once control of the PC has been handed-off from the BIOS to the bootstrap code in the MBR and from the MBR to the bootstrap code in the partition bootsector, and from there there to the executable boot files on the active partition, the actual logic involved in determining which operating system to load, where to load it from, which parameters/options to pass on to it, and completing any interactions with the user that might be available, the actual process of starting the operating system begins.</p><h4 id="Boot-Configuration-Files"><a href="#Boot-Configuration-Files" class="headerlink" title="Boot Configuration Files"></a>Boot Configuration Files</h4><p>While the executable bootloader files could theoretically contain hard-coded information pertaining to the operating systems to be loaded from the disk, that wouldn’t be very useful at all. As such, almost all bootloaders separate the actual, executable bootloader from the configuration file or database that contains information about the operating system(s) to load. All of the major bootloaders mentioned below have support for loading multiple operating systems, a process known as “dual-booting” or “multi-booting.”</p><h4 id="Popular-Bootloaders"><a href="#Popular-Bootloaders" class="headerlink" title="Popular Bootloaders"></a>Popular Bootloaders</h4><p>As discussed previously, there are many different bootloaders out there. Each operating system has its own bootloader, specifically designed to read its filesystem and locate the kernel that needs to be loaded for the OS to run. Here are some of the more-popular bootloaders – and their essential configuration files – for some of the common operating systems:</p><p><a href="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/NTLDR-BOOTMGR-GRUB.png"><img src="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/NTLDR-BOOTMGR-GRUB-1024x671.png" alt="NTLDR BOOTMGR GRUB"></a></p><p>Each of the popular operating systems has its own default bootloader. Windows NT, 2000, and XP as well as Windows Server 2000 and Windows Server 2003 use the NTLDR bootloader. Windows Vista introduced the BOOTMGR bootloader, currently used by Windows Vista, 7, 8, and 10, as well as Windows Server 2008 and 2012. While a number of different bootloaders have existed for Linux over the years, the two predominant bootloaders were Lilo and GRUB, but now most Linux distributions have coalesced around the all-powerful GRUB2 bootloader.</p><h5 id="NTLDR"><a href="#NTLDR" class="headerlink" title="NTLDR"></a>NTLDR</h5><p>NTLDR is the old Windows bootloader, first used in Windows NT (hence the “NT” in “NTLDR,” short for “NT Loader”), and currently used in Windows NT, Windows 2000, Windows XP, and Windows Server 2003.</p><p>NTLDR stores its boot configuration in a simple, text-based file called BOOT.INI, stored in the root directory of the active partition (often C:\Boot.ini). Once NTLDR is loaded and executed by the second-stage bootloader, it executes a helper program called NTDETECT.COM that identifies hardware and generates an index of information about the system. More information about NTLDR, BOOT.INI, and NTDETECT.COM can be found in the linked articles in our knowledgebase.</p><h5 id="BOOTMGR"><a href="#BOOTMGR" class="headerlink" title="BOOTMGR"></a>BOOTMGR</h5><p>BOOTMGR is the newer version of the bootloader used by Microsoft Windows, and it was first introduced in the beta versions of Windows Vista (then Windows Codename Longhorn). It’s currently used in Windows Vista, Windows 7, Windows 8, Windows 8.1, and Windows 10, as well as Windows Server 2008 and Windows Server 2012.</p><p>BOOTMGR marked a significant departure from NTLDR. It is a self-contained bootloader with many more options, especially designed to be compatible with newer functionality in modern operating systems and designed with EFI and GPT in mind (though only certain versions of BOOTMGR support loading Windows from a GPT disk or in a UEFI/EFI configuration). Unlike NTLDR, BOOTMGR stores its configuration in a file called the BCD – short for Boot Configuration Database. Unlike BOOT.INI, the BCD file is a binary database that cannot be opened and edited by hand.<a href="https://neosmart.net/wiki/mbr-boot-process/#fn8-2994">8</a> Instead, specifically designed command-line tools like bcdedit.exe and more user-friendly GUI utilities such as <a href="https://neosmart.net/EasyBCD/">EasyBCD</a> must be used to read and modify the list of operating systems.</p><h5 id="GRUB"><a href="#GRUB" class="headerlink" title="GRUB"></a>GRUB</h5><p>GRUB was the predominantly-used bootloader for Linux in the 1990s and early 2000s, designed to load not just Linux, but any operating system implementing the open multiboot specification for its kernel. GRUB’s configuration file containing a whitespace-formatted list of operating systems was often called menu.lst or grub.lst, and found under the /boot/ or /boot/grub/ directory. As these values could be changed by recompiling GRUB with different options, different Linux distributions had this file located under different names in different directories.</p><h5 id="GRUB-2"><a href="#GRUB-2" class="headerlink" title="GRUB 2"></a>GRUB 2</h5><p>While GRUB eventually won out over Lilo and eLilo, it was replaced with GRUB 2 around 2002, and the old GRUB was officially renamed “Legacy GRUB.” Confusingly, GRUB 2 is now officially called GRUB, while the old GRUB has officially been relegated to the name of “Legacy GRUB,” but you’ll thankfully find most resources online referring to the newer incarnation of the GRUB bootloader as GRUB 2.</p><p>GRUB 2 is a powerful, modular bootloader more akin to an operating system than a bootloader. It can load dozens of different operating systems, and supports custom plugins (“modules”) to introduce more functionality and support complex boot procedures.</p><p>The actual bootloader file for GRUB 2 is not a file called GRUB2, but rather a file usually called <em>core.img</em>. Unlike Legacy GRUB, the GRUB 2 configuration file is more of a script and less of traditional configuration file. The grub.cfg file, normally located at /boot/grub/grub.cfg on the boot partition, bears resemblance to shell scripts and supports advanced concepts like functions. The core functionality of GRUB 2 is supplemented with modules, normally found in a subdirectory of the /boot/grub/ directory.</p><h2 id="The-Boot-Process"><a href="#The-Boot-Process" class="headerlink" title="The Boot Process"></a>The Boot Process</h2><p>As previously mentioned, the stage of the boot process is a little more involved than the previous steps, primarily due to the additional complexity of reading the filesystem. The bootloader must also obtain information about the underlying machine hardware (either via the BIOS or on its own) in order to correctly load the desired operating system from the correct partition and provide any additional files or data that might be needed. It must also read its own configuration file from a regular file stored on the boot partition’s filesystem, so it needs to at the very least have full read support for whatever filesystem it resides on.</p><p><a href="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Bootloader-Flowchart.png"><img src="https://neosmart.net/wiki/wp-content/uploads/sites/5/2015/01/Bootloader-Flowchart-956x1024.png" alt="Bootloader Flowchart"></a></p><ul><li>**Initiate filesystem access<br>**Before anything else can happen, when the bootloader is first run it must load and run the primitive filesystem “drivers” that give it the ability to read, at the very least, the filesystem it is located on. Since it’s unable to read the filesystem before this, by necessity the code that provides this functionality must be compiled into the core bootloader file itself.</li><li>**Load and read configuration file(s)<br>**With support for the filesystem loaded, the bootloader can now read the list of operating systems from the disk and the the event that there are multiple operating systems specified, prepare it for display.</li><li>**Load and run supporting modules<br>**For bootloaders that are not wholly self-contained (such as NTLDR and GRUB 2), the bootloader now loads any supporting modules or helper programs (such as NTDETECT.COM) from the disk. The list of modules to load can be specified in the configuration file that was just read or hard-coded/compiled into the bootloader itself. Normally, each module will be executed as it is located and loaded from the disk.</li><li>**Display the boot menu<br>**At this point, with all the relevant configuration in hand, the bootloader can display what is commonly known as the boot menu on the screen. If multiple operating systems are installed, it is via the boot menu that the user of the computer can navigate a list of operating systems and choose which to load. From here, certain bootloaders also make it possible to specify run-time options, such as whether to load the selected operating system in safe mode.</li><li>**Load the OS kernel<br>**Once the user’s selection has been recorded, the bootloader moves on to the last and final stage of the boot process. Depending on the OS and the type of kernel, the bootloader will load the kernel image from the path specified in the configuration file (with the help of any submodules, if needed) into the memory. It then instructs the CPU to JMP to a certain location within the newly-loaded kernel and begin executing from there.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Thus ends the lengthy journey that begins with the push of a button and ends with an operating system’s kernel loaded into the memory and executed. The bootloader process is certainly a lot more nuanced and complicated than most realize, and it has both been designed and evolved to work in a fairly-standardized fashion across different platforms and under a variety of operating systems.</p><p>The individual components of the bootloader are, by and large, self-sufficient and self-contained. They can be swapped out individually without affecting the whole, meaning you can add disks and boot from different devices without worrying about upsetting existing configurations and operating systems. It also means that instead of having one, single bit of hardware/software to configure, setup, maintain, and debug, you instead are left with a intricate and oftentimes very fragile chain with multiple points susceptible to breakage and failure. When working properly, the boot process is a well-oiled machine, but when disaster strikes, it can be a very difficult process to understand and debug.</p><h2 id="Troubleshooting-the-Bootloader"><a href="#Troubleshooting-the-Bootloader" class="headerlink" title="Troubleshooting the Bootloader"></a>Troubleshooting the Bootloader</h2><p>The complicated nature of the boot process means that there’s a lot that needs to be set up and configured, and a lot that could potentially go wrong. Some resources that can come handy when troubleshooting the bootloader are listed below:</p><ul><li><a href="http://neosmart.net/EasyRE/">Easy Recovery Essentials for Windows</a>: a point-and-click bootable recovery CD that will recreate the entire above-described boot chain to get you back into Windows pretty much no matter what went wrong.</li><li><a href="https://neosmart.net/EasyBCD/">EasyBCD</a>: An easy-to-use utility that allows you to set up and configure a dual-boot or multi-boot between Windows, Linux, Mac, FreeBSD, and more.</li><li><a href="http://www.supergrubdisk.org/super-grub2-disk/">Super GRUB2 Disk</a>: A bootable GRUB2 disk that can be used to boot into Linux when your GRUB or GRUB2 is misconfigured or malfunctioning.</li></ul><h2 id="See-Also"><a href="#See-Also" class="headerlink" title="See Also"></a>See Also</h2><p>These additional articles and resources in our wiki and from other websites online contain additional information relevant to this topic:</p><ul><li>The EFI/GPT boot process: this document covered the basics of the BIOS/MBR boot process, now read and learn about how newer PCs with UEFI and GPT boot.</li><li>The differences between EFI/GPT and BIOS/MBR</li></ul><p><a href="https://neosmart.net/wiki/mbr-boot-process/suggestions">Propose an edit</a></p><hr><ol><li>Originally, the BIOS was stored on what was termed a ROM (“read-only memory”) chip: the BIOS code was hard-coded into the chip and could never be changed. Updates to the BIOS were rare and far in between, and could only be done by physically replacing the BIOS chip on the motherboard. Over time and with better technology, erasable ROM chips were developed that could be cleared by placing them in a box and blasting them with a dosage of UV (ultraviolet) radiation, then reprogramming their contents with ROM chip programming hardware. When that got old and tiring, electrically-erasable programmable ROM (EEPROM for short) was developed – with it, an electronic signal on specially-selected pins of the EEPROM chip would trigger an erase, and the chip could be programmed directly from where it was located on the motherboard. Easy-peasy-lemon-squeezy, as my wife would say!! <a href="https://neosmart.net/wiki/mbr-boot-process/#rf1-2994">↩</a></li><li>Almost every major hardware component now has firmware controlling it baked into its logic hardware, but we’re ignoring microcontroller firmware here. <a href="https://neosmart.net/wiki/mbr-boot-process/#rf2-2994">↩</a></li><li>Depending on the operating system and platform, the bootstrap code might actually only be anywhere from 434 to 446 bytes as parts of that region might be set aside for other purposes, such as the disk signature and disk timestamp. On most modern operating systems, 440 is the upper limit as the last 6 bytes are set aside for the 4-byte disk signature at offset 0x01B8 and a 2-byte field indicating the read-write state of the drive at offset 0x01BC (with 0x00 indicating read-write and 0x5A5A indicating a read-only drive). <a href="https://neosmart.net/wiki/mbr-boot-process/#rf3-2994">↩</a></li><li>There is a huge <em>caveat emptor</em> here: the bootable/active flag is actually a property of the individual (one of four) partition record, and not the partition table (list of partition records) or the MBR itself. What that means is that <em>technically</em> the actual bit indicating that a partition is bootable can actually be present (set to a value of 0x80) one more than one (or all!) partition(s) simultaneously! This is an invalid configuration and can cause many different boot problems though! <a href="https://neosmart.net/wiki/mbr-boot-process/#rf4-2994">↩</a></li><li>On a little-endian machine like all x86 CPUs, that would be a single word 0xAA55 while on a big-endian architecture like PowerPC, it would be read and written as 0x55AA. <a href="https://neosmart.net/wiki/mbr-boot-process/#rf5-2994">↩</a></li><li>Assembly is the most primitive programming language, and consists of individual instructions directly read and executed by the CPU. <a href="https://neosmart.net/wiki/mbr-boot-process/#rf6-2994">↩</a></li><li>On NTFS, this is called the master file table, or MFT for short. On FAT32, this is called the FAT (file allocation table). <a href="https://neosmart.net/wiki/mbr-boot-process/#rf7-2994">↩</a></li><li>In fact, the BCD file is a standard Windows registry hive, and it can be mounted for editing with tools like regedit.exe</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> bios </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
